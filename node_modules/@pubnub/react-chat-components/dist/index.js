'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var pubnubReact = require('pubnub-react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var React__namespace = /*#__PURE__*/_interopNamespace(React);

const SUSPENSE_PROMISE = Symbol();
const isSuspensePromise = (promise) => !!promise[SUSPENSE_PROMISE];
const isSuspensePromiseAlreadyCancelled = (suspensePromise) => !suspensePromise[SUSPENSE_PROMISE].c;
const cancelSuspensePromise = (suspensePromise) => {
  var _a;
  const { b: basePromise, c: cancelPromise } = suspensePromise[SUSPENSE_PROMISE];
  if (cancelPromise) {
    cancelPromise();
    (_a = promiseAbortMap.get(basePromise)) == null ? void 0 : _a();
  }
};
const isEqualSuspensePromise = (oldSuspensePromise, newSuspensePromise) => {
  const oldOriginalPromise = oldSuspensePromise[SUSPENSE_PROMISE].o;
  const newOriginalPromise = newSuspensePromise[SUSPENSE_PROMISE].o;
  return oldOriginalPromise === newOriginalPromise || oldSuspensePromise === newOriginalPromise || isSuspensePromise(oldOriginalPromise) && isEqualSuspensePromise(oldOriginalPromise, newSuspensePromise);
};
const createSuspensePromise = (basePromise, promise) => {
  const suspensePromiseExtra = {
    b: basePromise,
    o: promise,
    c: null
  };
  const suspensePromise = new Promise((resolve) => {
    suspensePromiseExtra.c = () => {
      suspensePromiseExtra.c = null;
      resolve();
    };
    promise.finally(suspensePromiseExtra.c);
  });
  suspensePromise[SUSPENSE_PROMISE] = suspensePromiseExtra;
  return suspensePromise;
};
const promiseAbortMap = /* @__PURE__ */ new WeakMap();

const hasInitialValue = (atom) => "init" in atom;
const READ_ATOM = "r";
const WRITE_ATOM = "w";
const COMMIT_ATOM = "c";
const SUBSCRIBE_ATOM = "s";
const RESTORE_ATOMS = "h";
const DEV_SUBSCRIBE_STATE = "n";
const DEV_GET_MOUNTED_ATOMS = "l";
const DEV_GET_ATOM_STATE = "a";
const DEV_GET_MOUNTED = "m";
const createStore = (initialValues) => {
  const committedAtomStateMap = /* @__PURE__ */ new WeakMap();
  const mountedMap = /* @__PURE__ */ new WeakMap();
  const pendingMap = /* @__PURE__ */ new Map();
  let stateListeners;
  let mountedAtoms;
  if ((undefined && undefined.MODE) !== "production") {
    stateListeners = /* @__PURE__ */ new Set();
    mountedAtoms = /* @__PURE__ */ new Set();
  }
  if (initialValues) {
    for (const [atom, value] of initialValues) {
      const atomState = {
        v: value,
        r: 0,
        y: true,
        d: /* @__PURE__ */ new Map()
      };
      if ((undefined && undefined.MODE) !== "production") {
        Object.freeze(atomState);
        if (!hasInitialValue(atom)) {
          console.warn(
            "Found initial value for derived atom which can cause unexpected behavior",
            atom
          );
        }
      }
      committedAtomStateMap.set(atom, atomState);
    }
  }
  const suspensePromiseCacheMap = /* @__PURE__ */ new WeakMap();
  const addSuspensePromiseToCache = (version, atom, suspensePromise) => {
    let cache = suspensePromiseCacheMap.get(atom);
    if (!cache) {
      cache = /* @__PURE__ */ new Map();
      suspensePromiseCacheMap.set(atom, cache);
    }
    suspensePromise.then(() => {
      if (cache.get(version) === suspensePromise) {
        cache.delete(version);
        if (!cache.size) {
          suspensePromiseCacheMap.delete(atom);
        }
      }
    });
    cache.set(version, suspensePromise);
  };
  const cancelAllSuspensePromiseInCache = (atom) => {
    const versionSet = /* @__PURE__ */ new Set();
    const cache = suspensePromiseCacheMap.get(atom);
    if (cache) {
      suspensePromiseCacheMap.delete(atom);
      cache.forEach((suspensePromise, version) => {
        cancelSuspensePromise(suspensePromise);
        versionSet.add(version);
      });
    }
    return versionSet;
  };
  const versionedAtomStateMapMap = /* @__PURE__ */ new WeakMap();
  const getVersionedAtomStateMap = (version) => {
    let versionedAtomStateMap = versionedAtomStateMapMap.get(version);
    if (!versionedAtomStateMap) {
      versionedAtomStateMap = /* @__PURE__ */ new Map();
      versionedAtomStateMapMap.set(version, versionedAtomStateMap);
    }
    return versionedAtomStateMap;
  };
  const getAtomState = (version, atom) => {
    if (version) {
      const versionedAtomStateMap = getVersionedAtomStateMap(version);
      let atomState = versionedAtomStateMap.get(atom);
      if (!atomState) {
        atomState = getAtomState(version.p, atom);
        if (atomState) {
          versionedAtomStateMap.set(atom, atomState);
        }
      }
      return atomState;
    }
    return committedAtomStateMap.get(atom);
  };
  const setAtomState = (version, atom, atomState) => {
    if ((undefined && undefined.MODE) !== "production") {
      Object.freeze(atomState);
    }
    if (version) {
      const versionedAtomStateMap = getVersionedAtomStateMap(version);
      versionedAtomStateMap.set(atom, atomState);
    } else {
      const prevAtomState = committedAtomStateMap.get(atom);
      committedAtomStateMap.set(atom, atomState);
      if (!pendingMap.has(atom)) {
        pendingMap.set(atom, prevAtomState);
      }
    }
  };
  const createReadDependencies = (version, prevReadDependencies = /* @__PURE__ */ new Map(), dependencies) => {
    if (!dependencies) {
      return prevReadDependencies;
    }
    const readDependencies = /* @__PURE__ */ new Map();
    let changed = false;
    dependencies.forEach((atom) => {
      var _a;
      const revision = ((_a = getAtomState(version, atom)) == null ? void 0 : _a.r) || 0;
      readDependencies.set(atom, revision);
      if (prevReadDependencies.get(atom) !== revision) {
        changed = true;
      }
    });
    if (prevReadDependencies.size === readDependencies.size && !changed) {
      return prevReadDependencies;
    }
    return readDependencies;
  };
  const setAtomValue = (version, atom, value, dependencies, suspensePromise) => {
    const atomState = getAtomState(version, atom);
    if (atomState) {
      if (suspensePromise && (!("p" in atomState) || !isEqualSuspensePromise(atomState.p, suspensePromise))) {
        return atomState;
      }
      if ("p" in atomState) {
        cancelSuspensePromise(atomState.p);
      }
    }
    const nextAtomState = {
      v: value,
      r: (atomState == null ? void 0 : atomState.r) || 0,
      y: true,
      d: createReadDependencies(version, atomState == null ? void 0 : atomState.d, dependencies)
    };
    let changed = !(atomState == null ? void 0 : atomState.y);
    if (!atomState || !("v" in atomState) || !Object.is(atomState.v, value)) {
      changed = true;
      ++nextAtomState.r;
      if (nextAtomState.d.has(atom)) {
        nextAtomState.d = new Map(nextAtomState.d).set(atom, nextAtomState.r);
      }
    } else if (nextAtomState.d !== atomState.d && (nextAtomState.d.size !== atomState.d.size || !Array.from(nextAtomState.d.keys()).every((a) => atomState.d.has(a)))) {
      changed = true;
      Promise.resolve().then(() => {
        flushPending(version);
      });
    }
    if (atomState && !changed) {
      return atomState;
    }
    setAtomState(version, atom, nextAtomState);
    return nextAtomState;
  };
  const setAtomReadError = (version, atom, error, dependencies, suspensePromise) => {
    const atomState = getAtomState(version, atom);
    if (atomState) {
      if (suspensePromise && (!("p" in atomState) || !isEqualSuspensePromise(atomState.p, suspensePromise))) {
        return atomState;
      }
      if ("p" in atomState) {
        cancelSuspensePromise(atomState.p);
      }
    }
    const nextAtomState = {
      e: error,
      r: ((atomState == null ? void 0 : atomState.r) || 0) + 1,
      y: true,
      d: createReadDependencies(version, atomState == null ? void 0 : atomState.d, dependencies)
    };
    setAtomState(version, atom, nextAtomState);
    return nextAtomState;
  };
  const setAtomSuspensePromise = (version, atom, suspensePromise, dependencies) => {
    const atomState = getAtomState(version, atom);
    if (atomState && "p" in atomState) {
      if (isEqualSuspensePromise(atomState.p, suspensePromise)) {
        if (!atomState.y) {
          return { ...atomState, y: true };
        }
        return atomState;
      }
      cancelSuspensePromise(atomState.p);
    }
    addSuspensePromiseToCache(version, atom, suspensePromise);
    const nextAtomState = {
      p: suspensePromise,
      r: ((atomState == null ? void 0 : atomState.r) || 0) + 1,
      y: true,
      d: createReadDependencies(version, atomState == null ? void 0 : atomState.d, dependencies)
    };
    setAtomState(version, atom, nextAtomState);
    return nextAtomState;
  };
  const setAtomPromiseOrValue = (version, atom, promiseOrValue, dependencies) => {
    if (promiseOrValue instanceof Promise) {
      const suspensePromise = createSuspensePromise(
        promiseOrValue,
        promiseOrValue.then((value) => {
          setAtomValue(version, atom, value, dependencies, suspensePromise);
        }).catch((e) => {
          if (e instanceof Promise) {
            if (isSuspensePromise(e)) {
              return e.then(() => {
                readAtomState(version, atom, true);
              });
            }
            return e;
          }
          setAtomReadError(version, atom, e, dependencies, suspensePromise);
        })
      );
      return setAtomSuspensePromise(
        version,
        atom,
        suspensePromise,
        dependencies
      );
    }
    return setAtomValue(
      version,
      atom,
      promiseOrValue,
      dependencies
    );
  };
  const setAtomInvalidated = (version, atom) => {
    const atomState = getAtomState(version, atom);
    if (atomState) {
      const nextAtomState = {
        ...atomState,
        y: false
      };
      setAtomState(version, atom, nextAtomState);
    } else if ((undefined && undefined.MODE) !== "production") {
      console.warn("[Bug] could not invalidate non existing atom", atom);
    }
  };
  const readAtomState = (version, atom, force) => {
    if (!force) {
      const atomState = getAtomState(version, atom);
      if (atomState) {
        if (atomState.y && "p" in atomState && !isSuspensePromiseAlreadyCancelled(atomState.p)) {
          return atomState;
        }
        atomState.d.forEach((_, a) => {
          if (a !== atom) {
            if (!mountedMap.has(a)) {
              readAtomState(version, a);
            } else {
              const aState = getAtomState(version, a);
              if (aState && !aState.y) {
                readAtomState(version, a);
              }
            }
          }
        });
        if (Array.from(atomState.d).every(([a, r]) => {
          const aState = getAtomState(version, a);
          return aState && !("p" in aState) && aState.r === r;
        })) {
          if (!atomState.y) {
            return { ...atomState, y: true };
          }
          return atomState;
        }
      }
    }
    const dependencies = /* @__PURE__ */ new Set();
    try {
      const promiseOrValue = atom.read((a) => {
        dependencies.add(a);
        const aState = a === atom ? getAtomState(version, a) : readAtomState(version, a);
        if (aState) {
          if ("e" in aState) {
            throw aState.e;
          }
          if ("p" in aState) {
            throw aState.p;
          }
          return aState.v;
        }
        if (hasInitialValue(a)) {
          return a.init;
        }
        throw new Error("no atom init");
      });
      return setAtomPromiseOrValue(version, atom, promiseOrValue, dependencies);
    } catch (errorOrPromise) {
      if (errorOrPromise instanceof Promise) {
        const suspensePromise = createSuspensePromise(
          errorOrPromise,
          errorOrPromise
        );
        return setAtomSuspensePromise(
          version,
          atom,
          suspensePromise,
          dependencies
        );
      }
      return setAtomReadError(version, atom, errorOrPromise, dependencies);
    }
  };
  const readAtom = (readingAtom, version) => {
    const atomState = readAtomState(version, readingAtom);
    return atomState;
  };
  const addAtom = (version, addingAtom) => {
    let mounted = mountedMap.get(addingAtom);
    if (!mounted) {
      mounted = mountAtom(version, addingAtom);
    }
    return mounted;
  };
  const canUnmountAtom = (atom, mounted) => !mounted.l.size && (!mounted.t.size || mounted.t.size === 1 && mounted.t.has(atom));
  const delAtom = (version, deletingAtom) => {
    const mounted = mountedMap.get(deletingAtom);
    if (mounted && canUnmountAtom(deletingAtom, mounted)) {
      unmountAtom(version, deletingAtom);
    }
  };
  const invalidateDependents = (version, atom) => {
    const mounted = mountedMap.get(atom);
    mounted == null ? void 0 : mounted.t.forEach((dependent) => {
      if (dependent !== atom) {
        setAtomInvalidated(version, dependent);
        invalidateDependents(version, dependent);
      }
    });
  };
  const writeAtomState = (version, atom, update) => {
    let isSync = true;
    const writeGetter = (a, options) => {
      const aState = readAtomState(version, a);
      if ("e" in aState) {
        throw aState.e;
      }
      if ("p" in aState) {
        if (options == null ? void 0 : options.unstable_promise) {
          return aState.p.then(() => {
            const s = getAtomState(version, a);
            if (s && "p" in s && s.p === aState.p) {
              return new Promise((resolve) => setTimeout(resolve)).then(
                () => writeGetter(a, options)
              );
            }
            return writeGetter(a, options);
          });
        }
        if ((undefined && undefined.MODE) !== "production") {
          console.info(
            "Reading pending atom state in write operation. We throw a promise for now.",
            a
          );
        }
        throw aState.p;
      }
      if ("v" in aState) {
        return aState.v;
      }
      if ((undefined && undefined.MODE) !== "production") {
        console.warn(
          "[Bug] no value found while reading atom in write operation. This is probably a bug.",
          a
        );
      }
      throw new Error("no value found");
    };
    const setter = (a, v) => {
      let promiseOrVoid2;
      if (a === atom) {
        if (!hasInitialValue(a)) {
          throw new Error("atom not writable");
        }
        const versionSet = cancelAllSuspensePromiseInCache(a);
        versionSet.forEach((cancelledVersion) => {
          if (cancelledVersion !== version) {
            setAtomPromiseOrValue(cancelledVersion, a, v);
          }
        });
        const prevAtomState = getAtomState(version, a);
        const nextAtomState = setAtomPromiseOrValue(version, a, v);
        if (prevAtomState !== nextAtomState) {
          invalidateDependents(version, a);
        }
      } else {
        promiseOrVoid2 = writeAtomState(version, a, v);
      }
      if (!isSync) {
        flushPending(version);
      }
      return promiseOrVoid2;
    };
    const promiseOrVoid = atom.write(writeGetter, setter, update);
    isSync = false;
    return promiseOrVoid;
  };
  const writeAtom = (writingAtom, update, version) => {
    const promiseOrVoid = writeAtomState(version, writingAtom, update);
    flushPending(version);
    return promiseOrVoid;
  };
  const isActuallyWritableAtom = (atom) => !!atom.write;
  const mountAtom = (version, atom, initialDependent) => {
    const mounted = {
      t: new Set(initialDependent && [initialDependent]),
      l: /* @__PURE__ */ new Set()
    };
    mountedMap.set(atom, mounted);
    if ((undefined && undefined.MODE) !== "production") {
      mountedAtoms.add(atom);
    }
    const atomState = readAtomState(void 0, atom);
    atomState.d.forEach((_, a) => {
      const aMounted = mountedMap.get(a);
      if (aMounted) {
        aMounted.t.add(atom);
      } else {
        if (a !== atom) {
          mountAtom(version, a, atom);
        }
      }
    });
    if (isActuallyWritableAtom(atom) && atom.onMount) {
      const setAtom = (update) => writeAtom(atom, update, version);
      const onUnmount = atom.onMount(setAtom);
      version = void 0;
      if (onUnmount) {
        mounted.u = onUnmount;
      }
    }
    return mounted;
  };
  const unmountAtom = (version, atom) => {
    var _a;
    const onUnmount = (_a = mountedMap.get(atom)) == null ? void 0 : _a.u;
    if (onUnmount) {
      onUnmount();
    }
    mountedMap.delete(atom);
    if ((undefined && undefined.MODE) !== "production") {
      mountedAtoms.delete(atom);
    }
    const atomState = getAtomState(version, atom);
    if (atomState) {
      if ("p" in atomState) {
        cancelSuspensePromise(atomState.p);
      }
      atomState.d.forEach((_, a) => {
        if (a !== atom) {
          const mounted = mountedMap.get(a);
          if (mounted) {
            mounted.t.delete(atom);
            if (canUnmountAtom(a, mounted)) {
              unmountAtom(version, a);
            }
          }
        }
      });
    } else if ((undefined && undefined.MODE) !== "production") {
      console.warn("[Bug] could not find atom state to unmount", atom);
    }
  };
  const mountDependencies = (version, atom, atomState, prevReadDependencies) => {
    const dependencies = new Set(atomState.d.keys());
    prevReadDependencies == null ? void 0 : prevReadDependencies.forEach((_, a) => {
      if (dependencies.has(a)) {
        dependencies.delete(a);
        return;
      }
      const mounted = mountedMap.get(a);
      if (mounted) {
        mounted.t.delete(atom);
        if (canUnmountAtom(a, mounted)) {
          unmountAtom(version, a);
        }
      }
    });
    dependencies.forEach((a) => {
      const mounted = mountedMap.get(a);
      if (mounted) {
        mounted.t.add(atom);
      } else if (mountedMap.has(atom)) {
        mountAtom(version, a, atom);
      }
    });
  };
  const flushPending = (version) => {
    if (version) {
      const versionedAtomStateMap = getVersionedAtomStateMap(version);
      versionedAtomStateMap.forEach((atomState, atom) => {
        const committedAtomState = committedAtomStateMap.get(atom);
        if (atomState !== committedAtomState) {
          const mounted = mountedMap.get(atom);
          mounted == null ? void 0 : mounted.l.forEach((listener) => listener(version));
        }
      });
      return;
    }
    while (pendingMap.size) {
      const pending = Array.from(pendingMap);
      pendingMap.clear();
      pending.forEach(([atom, prevAtomState]) => {
        const atomState = getAtomState(void 0, atom);
        if (atomState && atomState.d !== (prevAtomState == null ? void 0 : prevAtomState.d)) {
          mountDependencies(void 0, atom, atomState, prevAtomState == null ? void 0 : prevAtomState.d);
        }
        if (prevAtomState && !prevAtomState.y && (atomState == null ? void 0 : atomState.y)) {
          return;
        }
        const mounted = mountedMap.get(atom);
        mounted == null ? void 0 : mounted.l.forEach((listener) => listener());
      });
    }
    if ((undefined && undefined.MODE) !== "production") {
      stateListeners.forEach((l) => l());
    }
  };
  const commitVersionedAtomStateMap = (version) => {
    const versionedAtomStateMap = getVersionedAtomStateMap(version);
    versionedAtomStateMap.forEach((atomState, atom) => {
      const prevAtomState = committedAtomStateMap.get(atom);
      if (!prevAtomState || atomState.r > prevAtomState.r || atomState.y !== prevAtomState.y || atomState.r === prevAtomState.r && atomState.d !== prevAtomState.d) {
        committedAtomStateMap.set(atom, atomState);
        if (atomState.d !== (prevAtomState == null ? void 0 : prevAtomState.d)) {
          mountDependencies(version, atom, atomState, prevAtomState == null ? void 0 : prevAtomState.d);
        }
      }
    });
  };
  const commitAtom = (_atom, version) => {
    if (version) {
      commitVersionedAtomStateMap(version);
    }
    flushPending(void 0);
  };
  const subscribeAtom = (atom, callback, version) => {
    const mounted = addAtom(version, atom);
    const listeners = mounted.l;
    listeners.add(callback);
    return () => {
      listeners.delete(callback);
      delAtom(version, atom);
    };
  };
  const restoreAtoms = (values, version) => {
    for (const [atom, value] of values) {
      if (hasInitialValue(atom)) {
        setAtomPromiseOrValue(version, atom, value);
        invalidateDependents(version, atom);
      }
    }
    flushPending(version);
  };
  if ((undefined && undefined.MODE) !== "production") {
    return {
      [READ_ATOM]: readAtom,
      [WRITE_ATOM]: writeAtom,
      [COMMIT_ATOM]: commitAtom,
      [SUBSCRIBE_ATOM]: subscribeAtom,
      [RESTORE_ATOMS]: restoreAtoms,
      [DEV_SUBSCRIBE_STATE]: (l) => {
        stateListeners.add(l);
        return () => {
          stateListeners.delete(l);
        };
      },
      [DEV_GET_MOUNTED_ATOMS]: () => mountedAtoms.values(),
      [DEV_GET_ATOM_STATE]: (a) => committedAtomStateMap.get(a),
      [DEV_GET_MOUNTED]: (a) => mountedMap.get(a)
    };
  }
  return {
    [READ_ATOM]: readAtom,
    [WRITE_ATOM]: writeAtom,
    [COMMIT_ATOM]: commitAtom,
    [SUBSCRIBE_ATOM]: subscribeAtom,
    [RESTORE_ATOMS]: restoreAtoms
  };
};

const createScopeContainer = (initialValues, unstable_createStore) => {
  const store = unstable_createStore ? unstable_createStore(initialValues).SECRET_INTERNAL_store : createStore(initialValues);
  return { s: store };
};
const ScopeContextMap = /* @__PURE__ */ new Map();
const getScopeContext = (scope) => {
  if (!ScopeContextMap.has(scope)) {
    ScopeContextMap.set(scope, React.createContext(createScopeContainer()));
  }
  return ScopeContextMap.get(scope);
};

const Provider = ({
  children,
  initialValues,
  scope,
  unstable_createStore,
  unstable_enableVersionedWrite
}) => {
  const [version, setVersion] = React.useState({});
  React.useEffect(() => {
    const scopeContainer = scopeContainerRef.current;
    if (scopeContainer.w) {
      scopeContainer.s[COMMIT_ATOM](null, version);
      delete version.p;
      scopeContainer.v = version;
    }
  }, [version]);
  const scopeContainerRef = React.useRef();
  if (!scopeContainerRef.current) {
    const scopeContainer = createScopeContainer(
      initialValues,
      unstable_createStore
    );
    if (unstable_enableVersionedWrite) {
      let retrying = 0;
      scopeContainer.w = (write) => {
        setVersion((parentVersion) => {
          const nextVersion = retrying ? parentVersion : { p: parentVersion };
          write(nextVersion);
          return nextVersion;
        });
      };
      scopeContainer.v = version;
      scopeContainer.r = (fn) => {
        ++retrying;
        fn();
        --retrying;
      };
    }
    scopeContainerRef.current = scopeContainer;
  }
  const ScopeContainerContext = getScopeContext(scope);
  return React.createElement(
    ScopeContainerContext.Provider,
    {
      value: scopeContainerRef.current
    },
    children
  );
};

let keyCount = 0;
function atom(read, write) {
  const key = `atom${++keyCount}`;
  const config = {
    toString: () => key
  };
  if (typeof read === "function") {
    config.read = read;
  } else {
    config.init = read;
    config.read = (get) => get(config);
    config.write = (get, set, update) => set(config, typeof update === "function" ? update(get(config)) : update);
  }
  if (write) {
    config.write = write;
  }
  return config;
}

function useAtomValue(atom, scope) {
  const ScopeContext = getScopeContext(scope);
  const scopeContainer = React.useContext(ScopeContext);
  const { s: store, v: versionFromProvider } = scopeContainer;
  const getAtomValue = (version2) => {
    const atomState = store[READ_ATOM](atom, version2);
    if ((undefined && undefined.MODE) !== "production" && !atomState.y) {
      throw new Error("should not be invalidated");
    }
    if ("e" in atomState) {
      throw atomState.e;
    }
    if ("p" in atomState) {
      throw atomState.p;
    }
    if ("v" in atomState) {
      return atomState.v;
    }
    throw new Error("no atom value");
  };
  const [[version, valueFromReducer, atomFromReducer], rerenderIfChanged] = React.useReducer(
    (prev, nextVersion) => {
      const nextValue = getAtomValue(nextVersion);
      if (Object.is(prev[1], nextValue) && prev[2] === atom) {
        return prev;
      }
      return [nextVersion, nextValue, atom];
    },
    versionFromProvider,
    (initialVersion) => {
      const initialValue = getAtomValue(initialVersion);
      return [initialVersion, initialValue, atom];
    }
  );
  let value = valueFromReducer;
  if (atomFromReducer !== atom) {
    rerenderIfChanged(version);
    value = getAtomValue(version);
  }
  React.useEffect(() => {
    const { v: versionFromProvider2 } = scopeContainer;
    if (versionFromProvider2) {
      store[COMMIT_ATOM](atom, versionFromProvider2);
    }
    const unsubscribe = store[SUBSCRIBE_ATOM](
      atom,
      rerenderIfChanged,
      versionFromProvider2
    );
    rerenderIfChanged(versionFromProvider2);
    return unsubscribe;
  }, [store, atom, scopeContainer]);
  React.useEffect(() => {
    store[COMMIT_ATOM](atom, version);
  });
  React.useDebugValue(value);
  return value;
}

function useSetAtom(atom, scope) {
  const ScopeContext = getScopeContext(scope);
  const { s: store, w: versionedWrite } = React.useContext(ScopeContext);
  const setAtom = React.useCallback(
    (update) => {
      if ((undefined && undefined.MODE) !== "production" && !("write" in atom)) {
        throw new Error("not writable atom");
      }
      const write = (version) => store[WRITE_ATOM](atom, update, version);
      return versionedWrite ? versionedWrite(write) : write();
    },
    [store, versionedWrite, atom]
  );
  return setAtom;
}

function useAtom(atom, scope) {
  if ("scope" in atom) {
    console.warn(
      "atom.scope is deprecated. Please do useAtom(atom, scope) instead."
    );
    scope = atom.scope;
  }
  return [
    useAtomValue(atom, scope),
    useSetAtom(atom, scope)
  ];
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

var ThemeAtom = atom("light");
var CurrentChannelAtom = atom("");
var SubscribeChannelsAtom = atom([]);
var SubscribeChannelGroupsAtom = atom([]);
var UsersMetaAtom = atom([]);
var MessagesAtom = atom({});
var PaginationAtom = atom({});
var TypingIndicatorAtom = atom({});
var TypingIndicatorTimeoutAtom = atom(10);
var RetryFunctionAtom = atom({
    function: function () { return null; },
});
var ErrorFunctionAtom = atom({
    function: function () { return null; },
});
var MissingUserCallbackAtom = atom({
    function: undefined,
});
var RequestMissingUserAtom = atom(null, function (get, set, userId) { return __awaiter(void 0, void 0, void 0, function () {
    var missingUserCallback, missingUser;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                missingUserCallback = get(MissingUserCallbackAtom).function;
                if (!missingUserCallback)
                    return [2 /*return*/];
                return [4 /*yield*/, missingUserCallback(userId)];
            case 1:
                missingUser = _a.sent();
                set(UsersMetaAtom, __spreadArray(__spreadArray([], get(UsersMetaAtom), true), [missingUser], false));
                return [2 /*return*/];
        }
    });
}); });
var CurrentChannelMessagesAtom = atom(function (get) { return (get(MessagesAtom) ? get(MessagesAtom)[get(CurrentChannelAtom)] || [] : []); }, function (get, set, value) {
    var _a;
    return set(MessagesAtom, Object.assign({}, get(MessagesAtom), (_a = {}, _a[get(CurrentChannelAtom)] = value, _a)));
});
var CurrentChannelPaginationAtom = atom(function (get) {
    return get(PaginationAtom)[get(CurrentChannelAtom)] || false;
}, function (get, set, value) {
    var _a;
    return set(PaginationAtom, Object.assign({}, get(PaginationAtom), (_a = {}, _a[get(CurrentChannelAtom)] = value, _a)));
});
var CurrentChannelTypingIndicatorAtom = atom(function (get) { return get(TypingIndicatorAtom)[get(CurrentChannelAtom)] || {}; }, function (get, set, value) {
    var _a;
    return set(TypingIndicatorAtom, Object.assign({}, get(TypingIndicatorAtom), (_a = {}, _a[get(CurrentChannelAtom)] = value, _a)));
});

/**
 * Renders an interactive list of channels.
 *
 * It can represent all channels of the application, only
 * channels joined by the current user, all channels available to be joined, or whatever else is
 * passed into it. A common pattern in chat applications is to render two instances of the
 * component - one visible all the time to show joined channels, and another one hidden inside a
 * modal with channels available to join. Make sure to handle the onChannelSwitched event to switch
 * the current channel passed to the Chat provider.
 */
var useChannelListCore = function (props) {
    var currentChannel = useAtom(CurrentChannelAtom)[0];
    var theme = useAtom(ThemeAtom)[0];
    /*
    /* Helper functions
    */
    var isChannelActive = function (ch) {
        return currentChannel === ch.id;
    };
    var channelSorter = function (a, b) {
        var _a;
        if (props.sort)
            return props.sort(a, b);
        return (_a = a === null || a === void 0 ? void 0 : a.name) === null || _a === void 0 ? void 0 : _a.localeCompare(b.name, "en", { sensitivity: "base" });
    };
    var channelFromString = function (channel) {
        if (typeof channel === "string") {
            return {
                id: channel,
                name: channel,
            };
        }
        return channel;
    };
    /*
    /* Commands
    */
    var switchChannel = function (channel) {
        if (props.onChannelSwitched)
            props.onChannelSwitched(channel);
    };
    return { channelFromString: channelFromString, channelSorter: channelSorter, isChannelActive: isChannelActive, switchChannel: switchChannel, theme: theme };
};

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */

function listCacheClear$1() {
  this.__data__ = [];
  this.size = 0;
}

var _listCacheClear = listCacheClear$1;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

function eq$5(value, other) {
  return value === other || (value !== value && other !== other);
}

var eq_1 = eq$5;

var eq$4 = eq_1;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf$4(array, key) {
  var length = array.length;
  while (length--) {
    if (eq$4(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

var _assocIndexOf = assocIndexOf$4;

var assocIndexOf$3 = _assocIndexOf;

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete$1(key) {
  var data = this.__data__,
      index = assocIndexOf$3(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

var _listCacheDelete = listCacheDelete$1;

var assocIndexOf$2 = _assocIndexOf;

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet$1(key) {
  var data = this.__data__,
      index = assocIndexOf$2(data, key);

  return index < 0 ? undefined : data[index][1];
}

var _listCacheGet = listCacheGet$1;

var assocIndexOf$1 = _assocIndexOf;

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas$1(key) {
  return assocIndexOf$1(this.__data__, key) > -1;
}

var _listCacheHas = listCacheHas$1;

var assocIndexOf = _assocIndexOf;

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet$1(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

var _listCacheSet = listCacheSet$1;

var listCacheClear = _listCacheClear,
    listCacheDelete = _listCacheDelete,
    listCacheGet = _listCacheGet,
    listCacheHas = _listCacheHas,
    listCacheSet = _listCacheSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache$4(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache$4.prototype.clear = listCacheClear;
ListCache$4.prototype['delete'] = listCacheDelete;
ListCache$4.prototype.get = listCacheGet;
ListCache$4.prototype.has = listCacheHas;
ListCache$4.prototype.set = listCacheSet;

var _ListCache = ListCache$4;

var ListCache$3 = _ListCache;

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear$1() {
  this.__data__ = new ListCache$3;
  this.size = 0;
}

var _stackClear = stackClear$1;

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function stackDelete$1(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

var _stackDelete = stackDelete$1;

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

function stackGet$1(key) {
  return this.__data__.get(key);
}

var _stackGet = stackGet$1;

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function stackHas$1(key) {
  return this.__data__.has(key);
}

var _stackHas = stackHas$1;

/** Detect free variable `global` from Node.js. */

var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

var _freeGlobal = freeGlobal$1;

var freeGlobal = _freeGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root$8 = freeGlobal || freeSelf || Function('return this')();

var _root = root$8;

var root$7 = _root;

/** Built-in value references. */
var Symbol$6 = root$7.Symbol;

var _Symbol = Symbol$6;

var Symbol$5 = _Symbol;

/** Used for built-in method references. */
var objectProto$f = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$c = objectProto$f.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$f.toString;

/** Built-in value references. */
var symToStringTag$1 = Symbol$5 ? Symbol$5.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag$1(value) {
  var isOwn = hasOwnProperty$c.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

var _getRawTag = getRawTag$1;

/** Used for built-in method references. */

var objectProto$e = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto$e.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString$1(value) {
  return nativeObjectToString.call(value);
}

var _objectToString = objectToString$1;

var Symbol$4 = _Symbol,
    getRawTag = _getRawTag,
    objectToString = _objectToString;

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol$4 ? Symbol$4.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag$6(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

var _baseGetTag = baseGetTag$6;

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

function isObject$9(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

var isObject_1 = isObject$9;

var baseGetTag$5 = _baseGetTag,
    isObject$8 = isObject_1;

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag$2 = '[object Function]',
    genTag$1 = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction$3(value) {
  if (!isObject$8(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag$5(value);
  return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
}

var isFunction_1 = isFunction$3;

var root$6 = _root;

/** Used to detect overreaching core-js shims. */
var coreJsData$1 = root$6['__core-js_shared__'];

var _coreJsData = coreJsData$1;

var coreJsData = _coreJsData;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked$1(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

var _isMasked = isMasked$1;

/** Used for built-in method references. */

var funcProto$2 = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$2 = funcProto$2.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource$2(func) {
  if (func != null) {
    try {
      return funcToString$2.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

var _toSource = toSource$2;

var isFunction$2 = isFunction_1,
    isMasked = _isMasked,
    isObject$7 = isObject_1,
    toSource$1 = _toSource;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto$1 = Function.prototype,
    objectProto$d = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$b = objectProto$d.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString$1.call(hasOwnProperty$b).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative$1(value) {
  if (!isObject$7(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource$1(value));
}

var _baseIsNative = baseIsNative$1;

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

function getValue$1(object, key) {
  return object == null ? undefined : object[key];
}

var _getValue = getValue$1;

var baseIsNative = _baseIsNative,
    getValue = _getValue;

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative$7(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

var _getNative = getNative$7;

var getNative$6 = _getNative,
    root$5 = _root;

/* Built-in method references that are verified to be native. */
var Map$4 = getNative$6(root$5, 'Map');

var _Map = Map$4;

var getNative$5 = _getNative;

/* Built-in method references that are verified to be native. */
var nativeCreate$4 = getNative$5(Object, 'create');

var _nativeCreate = nativeCreate$4;

var nativeCreate$3 = _nativeCreate;

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear$1() {
  this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
  this.size = 0;
}

var _hashClear = hashClear$1;

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function hashDelete$1(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

var _hashDelete = hashDelete$1;

var nativeCreate$2 = _nativeCreate;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto$c = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$a = objectProto$c.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet$1(key) {
  var data = this.__data__;
  if (nativeCreate$2) {
    var result = data[key];
    return result === HASH_UNDEFINED$2 ? undefined : result;
  }
  return hasOwnProperty$a.call(data, key) ? data[key] : undefined;
}

var _hashGet = hashGet$1;

var nativeCreate$1 = _nativeCreate;

/** Used for built-in method references. */
var objectProto$b = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$9 = objectProto$b.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas$1(key) {
  var data = this.__data__;
  return nativeCreate$1 ? (data[key] !== undefined) : hasOwnProperty$9.call(data, key);
}

var _hashHas = hashHas$1;

var nativeCreate = _nativeCreate;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet$1(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
  return this;
}

var _hashSet = hashSet$1;

var hashClear = _hashClear,
    hashDelete = _hashDelete,
    hashGet = _hashGet,
    hashHas = _hashHas,
    hashSet = _hashSet;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash$1(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash$1.prototype.clear = hashClear;
Hash$1.prototype['delete'] = hashDelete;
Hash$1.prototype.get = hashGet;
Hash$1.prototype.has = hashHas;
Hash$1.prototype.set = hashSet;

var _Hash = Hash$1;

var Hash = _Hash,
    ListCache$2 = _ListCache,
    Map$3 = _Map;

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear$1() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map$3 || ListCache$2),
    'string': new Hash
  };
}

var _mapCacheClear = mapCacheClear$1;

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */

function isKeyable$1(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

var _isKeyable = isKeyable$1;

var isKeyable = _isKeyable;

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData$4(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

var _getMapData = getMapData$4;

var getMapData$3 = _getMapData;

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete$1(key) {
  var result = getMapData$3(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

var _mapCacheDelete = mapCacheDelete$1;

var getMapData$2 = _getMapData;

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet$1(key) {
  return getMapData$2(this, key).get(key);
}

var _mapCacheGet = mapCacheGet$1;

var getMapData$1 = _getMapData;

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas$1(key) {
  return getMapData$1(this, key).has(key);
}

var _mapCacheHas = mapCacheHas$1;

var getMapData = _getMapData;

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet$1(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

var _mapCacheSet = mapCacheSet$1;

var mapCacheClear = _mapCacheClear,
    mapCacheDelete = _mapCacheDelete,
    mapCacheGet = _mapCacheGet,
    mapCacheHas = _mapCacheHas,
    mapCacheSet = _mapCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache$3(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache$3.prototype.clear = mapCacheClear;
MapCache$3.prototype['delete'] = mapCacheDelete;
MapCache$3.prototype.get = mapCacheGet;
MapCache$3.prototype.has = mapCacheHas;
MapCache$3.prototype.set = mapCacheSet;

var _MapCache = MapCache$3;

var ListCache$1 = _ListCache,
    Map$2 = _Map,
    MapCache$2 = _MapCache;

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet$1(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache$1) {
    var pairs = data.__data__;
    if (!Map$2 || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache$2(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

var _stackSet = stackSet$1;

var ListCache = _ListCache,
    stackClear = _stackClear,
    stackDelete = _stackDelete,
    stackGet = _stackGet,
    stackHas = _stackHas,
    stackSet = _stackSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack$3(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack$3.prototype.clear = stackClear;
Stack$3.prototype['delete'] = stackDelete;
Stack$3.prototype.get = stackGet;
Stack$3.prototype.has = stackHas;
Stack$3.prototype.set = stackSet;

var _Stack = Stack$3;

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */

function arrayEach$1(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

var _arrayEach = arrayEach$1;

var getNative$4 = _getNative;

var defineProperty$2 = (function() {
  try {
    var func = getNative$4(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

var _defineProperty = defineProperty$2;

var defineProperty$1 = _defineProperty;

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue$3(object, key, value) {
  if (key == '__proto__' && defineProperty$1) {
    defineProperty$1(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

var _baseAssignValue = baseAssignValue$3;

var baseAssignValue$2 = _baseAssignValue,
    eq$3 = eq_1;

/** Used for built-in method references. */
var objectProto$a = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$8 = objectProto$a.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue$3(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty$8.call(object, key) && eq$3(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue$2(object, key, value);
  }
}

var _assignValue = assignValue$3;

var assignValue$2 = _assignValue,
    baseAssignValue$1 = _baseAssignValue;

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject$5(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue$1(object, key, newValue);
    } else {
      assignValue$2(object, key, newValue);
    }
  }
  return object;
}

var _copyObject = copyObject$5;

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */

function baseTimes$1(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

var _baseTimes = baseTimes$1;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

function isObjectLike$9(value) {
  return value != null && typeof value == 'object';
}

var isObjectLike_1 = isObjectLike$9;

var baseGetTag$4 = _baseGetTag,
    isObjectLike$8 = isObjectLike_1;

/** `Object#toString` result references. */
var argsTag$3 = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments$1(value) {
  return isObjectLike$8(value) && baseGetTag$4(value) == argsTag$3;
}

var _baseIsArguments = baseIsArguments$1;

var baseIsArguments = _baseIsArguments,
    isObjectLike$7 = isObjectLike_1;

/** Used for built-in method references. */
var objectProto$9 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$7 = objectProto$9.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable$1 = objectProto$9.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments$2 = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike$7(value) && hasOwnProperty$7.call(value, 'callee') &&
    !propertyIsEnumerable$1.call(value, 'callee');
};

var isArguments_1 = isArguments$2;

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

var isArray$8 = Array.isArray;

var isArray_1 = isArray$8;

var isBuffer$4 = {exports: {}};

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */

function stubFalse() {
  return false;
}

var stubFalse_1 = stubFalse;

(function (module, exports) {
	var root = _root,
	    stubFalse = stubFalse_1;

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	module.exports = isBuffer;
} (isBuffer$4, isBuffer$4.exports));

/** Used as references for various `Number` constants. */

var MAX_SAFE_INTEGER$1 = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex$3(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

var _isIndex = isIndex$3;

/** Used as references for various `Number` constants. */

var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength$2(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

var isLength_1 = isLength$2;

var baseGetTag$3 = _baseGetTag,
    isLength$1 = isLength_1,
    isObjectLike$6 = isObjectLike_1;

/** `Object#toString` result references. */
var argsTag$2 = '[object Arguments]',
    arrayTag$2 = '[object Array]',
    boolTag$3 = '[object Boolean]',
    dateTag$3 = '[object Date]',
    errorTag$2 = '[object Error]',
    funcTag$1 = '[object Function]',
    mapTag$5 = '[object Map]',
    numberTag$3 = '[object Number]',
    objectTag$4 = '[object Object]',
    regexpTag$3 = '[object RegExp]',
    setTag$5 = '[object Set]',
    stringTag$3 = '[object String]',
    weakMapTag$2 = '[object WeakMap]';

var arrayBufferTag$3 = '[object ArrayBuffer]',
    dataViewTag$4 = '[object DataView]',
    float32Tag$2 = '[object Float32Array]',
    float64Tag$2 = '[object Float64Array]',
    int8Tag$2 = '[object Int8Array]',
    int16Tag$2 = '[object Int16Array]',
    int32Tag$2 = '[object Int32Array]',
    uint8Tag$2 = '[object Uint8Array]',
    uint8ClampedTag$2 = '[object Uint8ClampedArray]',
    uint16Tag$2 = '[object Uint16Array]',
    uint32Tag$2 = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =
typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =
typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =
typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =
typedArrayTags[uint32Tag$2] = true;
typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] =
typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] =
typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] =
typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] =
typedArrayTags[mapTag$5] = typedArrayTags[numberTag$3] =
typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$3] =
typedArrayTags[setTag$5] = typedArrayTags[stringTag$3] =
typedArrayTags[weakMapTag$2] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray$1(value) {
  return isObjectLike$6(value) &&
    isLength$1(value.length) && !!typedArrayTags[baseGetTag$3(value)];
}

var _baseIsTypedArray = baseIsTypedArray$1;

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */

function baseUnary$3(func) {
  return function(value) {
    return func(value);
  };
}

var _baseUnary = baseUnary$3;

var _nodeUtil = {exports: {}};

(function (module, exports) {
	var freeGlobal = _freeGlobal;

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    // Use `util.types` for Node.js 10+.
	    var types = freeModule && freeModule.require && freeModule.require('util').types;

	    if (types) {
	      return types;
	    }

	    // Legacy `process.binding('util')` for Node.js < 10.
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());

	module.exports = nodeUtil;
} (_nodeUtil, _nodeUtil.exports));

var baseIsTypedArray = _baseIsTypedArray,
    baseUnary$2 = _baseUnary,
    nodeUtil$2 = _nodeUtil.exports;

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray$3 = nodeIsTypedArray ? baseUnary$2(nodeIsTypedArray) : baseIsTypedArray;

var isTypedArray_1 = isTypedArray$3;

var baseTimes = _baseTimes,
    isArguments$1 = isArguments_1,
    isArray$7 = isArray_1,
    isBuffer$3 = isBuffer$4.exports,
    isIndex$2 = _isIndex,
    isTypedArray$2 = isTypedArray_1;

/** Used for built-in method references. */
var objectProto$8 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$6 = objectProto$8.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys$2(value, inherited) {
  var isArr = isArray$7(value),
      isArg = !isArr && isArguments$1(value),
      isBuff = !isArr && !isArg && isBuffer$3(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray$2(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$6.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex$2(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

var _arrayLikeKeys = arrayLikeKeys$2;

/** Used for built-in method references. */

var objectProto$7 = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype$3(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$7;

  return value === proto;
}

var _isPrototype = isPrototype$3;

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */

function overArg$2(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

var _overArg = overArg$2;

var overArg$1 = _overArg;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys$1 = overArg$1(Object.keys, Object);

var _nativeKeys = nativeKeys$1;

var isPrototype$2 = _isPrototype,
    nativeKeys = _nativeKeys;

/** Used for built-in method references. */
var objectProto$6 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys$1(object) {
  if (!isPrototype$2(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$5.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

var _baseKeys = baseKeys$1;

var isFunction$1 = isFunction_1,
    isLength = isLength_1;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike$4(value) {
  return value != null && isLength(value.length) && !isFunction$1(value);
}

var isArrayLike_1 = isArrayLike$4;

var arrayLikeKeys$1 = _arrayLikeKeys,
    baseKeys = _baseKeys,
    isArrayLike$3 = isArrayLike_1;

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys$3(object) {
  return isArrayLike$3(object) ? arrayLikeKeys$1(object) : baseKeys(object);
}

var keys_1 = keys$3;

var copyObject$4 = _copyObject,
    keys$2 = keys_1;

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign$1(object, source) {
  return object && copyObject$4(source, keys$2(source), object);
}

var _baseAssign = baseAssign$1;

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

function nativeKeysIn$1(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

var _nativeKeysIn = nativeKeysIn$1;

var isObject$6 = isObject_1,
    isPrototype$1 = _isPrototype,
    nativeKeysIn = _nativeKeysIn;

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$4 = objectProto$5.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn$1(object) {
  if (!isObject$6(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype$1(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty$4.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

var _baseKeysIn = baseKeysIn$1;

var arrayLikeKeys = _arrayLikeKeys,
    baseKeysIn = _baseKeysIn,
    isArrayLike$2 = isArrayLike_1;

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn$5(object) {
  return isArrayLike$2(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

var keysIn_1 = keysIn$5;

var copyObject$3 = _copyObject,
    keysIn$4 = keysIn_1;

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn$1(object, source) {
  return object && copyObject$3(source, keysIn$4(source), object);
}

var _baseAssignIn = baseAssignIn$1;

var _cloneBuffer = {exports: {}};

(function (module, exports) {
	var root = _root;

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var length = buffer.length,
	      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	  buffer.copy(result);
	  return result;
	}

	module.exports = cloneBuffer;
} (_cloneBuffer, _cloneBuffer.exports));

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */

function copyArray$2(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

var _copyArray = copyArray$2;

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */

function arrayFilter$1(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

var _arrayFilter = arrayFilter$1;

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */

function stubArray$2() {
  return [];
}

var stubArray_1 = stubArray$2;

var arrayFilter = _arrayFilter,
    stubArray$1 = stubArray_1;

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto$4.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

var _getSymbols = getSymbols$3;

var copyObject$2 = _copyObject,
    getSymbols$2 = _getSymbols;

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols$1(source, object) {
  return copyObject$2(source, getSymbols$2(source), object);
}

var _copySymbols = copySymbols$1;

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */

function arrayPush$2(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

var _arrayPush = arrayPush$2;

var overArg = _overArg;

/** Built-in value references. */
var getPrototype$3 = overArg(Object.getPrototypeOf, Object);

var _getPrototype = getPrototype$3;

var arrayPush$1 = _arrayPush,
    getPrototype$2 = _getPrototype,
    getSymbols$1 = _getSymbols,
    stubArray = stubArray_1;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush$1(result, getSymbols$1(object));
    object = getPrototype$2(object);
  }
  return result;
};

var _getSymbolsIn = getSymbolsIn$2;

var copyObject$1 = _copyObject,
    getSymbolsIn$1 = _getSymbolsIn;

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn$1(source, object) {
  return copyObject$1(source, getSymbolsIn$1(source), object);
}

var _copySymbolsIn = copySymbolsIn$1;

var arrayPush = _arrayPush,
    isArray$6 = isArray_1;

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray$6(object) ? result : arrayPush(result, symbolsFunc(object));
}

var _baseGetAllKeys = baseGetAllKeys$2;

var baseGetAllKeys$1 = _baseGetAllKeys,
    getSymbols = _getSymbols,
    keys$1 = keys_1;

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys$2(object) {
  return baseGetAllKeys$1(object, keys$1, getSymbols);
}

var _getAllKeys = getAllKeys$2;

var baseGetAllKeys = _baseGetAllKeys,
    getSymbolsIn = _getSymbolsIn,
    keysIn$3 = keysIn_1;

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn$1(object) {
  return baseGetAllKeys(object, keysIn$3, getSymbolsIn);
}

var _getAllKeysIn = getAllKeysIn$1;

var getNative$3 = _getNative,
    root$4 = _root;

/* Built-in method references that are verified to be native. */
var DataView$1 = getNative$3(root$4, 'DataView');

var _DataView = DataView$1;

var getNative$2 = _getNative,
    root$3 = _root;

/* Built-in method references that are verified to be native. */
var Promise$2 = getNative$2(root$3, 'Promise');

var _Promise = Promise$2;

var getNative$1 = _getNative,
    root$2 = _root;

/* Built-in method references that are verified to be native. */
var Set$2 = getNative$1(root$2, 'Set');

var _Set = Set$2;

var getNative = _getNative,
    root$1 = _root;

/* Built-in method references that are verified to be native. */
var WeakMap$2 = getNative(root$1, 'WeakMap');

var _WeakMap = WeakMap$2;

var DataView = _DataView,
    Map$1 = _Map,
    Promise$1 = _Promise,
    Set$1 = _Set,
    WeakMap$1 = _WeakMap,
    baseGetTag$2 = _baseGetTag,
    toSource = _toSource;

/** `Object#toString` result references. */
var mapTag$4 = '[object Map]',
    objectTag$3 = '[object Object]',
    promiseTag = '[object Promise]',
    setTag$4 = '[object Set]',
    weakMapTag$1 = '[object WeakMap]';

var dataViewTag$3 = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map$1),
    promiseCtorString = toSource(Promise$1),
    setCtorString = toSource(Set$1),
    weakMapCtorString = toSource(WeakMap$1);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag$4 = baseGetTag$2;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag$4(new DataView(new ArrayBuffer(1))) != dataViewTag$3) ||
    (Map$1 && getTag$4(new Map$1) != mapTag$4) ||
    (Promise$1 && getTag$4(Promise$1.resolve()) != promiseTag) ||
    (Set$1 && getTag$4(new Set$1) != setTag$4) ||
    (WeakMap$1 && getTag$4(new WeakMap$1) != weakMapTag$1)) {
  getTag$4 = function(value) {
    var result = baseGetTag$2(value),
        Ctor = result == objectTag$3 ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag$3;
        case mapCtorString: return mapTag$4;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag$4;
        case weakMapCtorString: return weakMapTag$1;
      }
    }
    return result;
  };
}

var _getTag = getTag$4;

/** Used for built-in method references. */

var objectProto$3 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray$1(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty$3.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

var _initCloneArray = initCloneArray$1;

var root = _root;

/** Built-in value references. */
var Uint8Array$3 = root.Uint8Array;

var _Uint8Array = Uint8Array$3;

var Uint8Array$2 = _Uint8Array;

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer$3(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array$2(result).set(new Uint8Array$2(arrayBuffer));
  return result;
}

var _cloneArrayBuffer = cloneArrayBuffer$3;

var cloneArrayBuffer$2 = _cloneArrayBuffer;

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView$1(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer$2(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

var _cloneDataView = cloneDataView$1;

/** Used to match `RegExp` flags from their coerced string values. */

var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp$1(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

var _cloneRegExp = cloneRegExp$1;

var Symbol$3 = _Symbol;

/** Used to convert symbols to primitives and strings. */
var symbolProto$2 = Symbol$3 ? Symbol$3.prototype : undefined,
    symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol$1(symbol) {
  return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
}

var _cloneSymbol = cloneSymbol$1;

var cloneArrayBuffer$1 = _cloneArrayBuffer;

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray$2(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer$1(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

var _cloneTypedArray = cloneTypedArray$2;

var cloneArrayBuffer = _cloneArrayBuffer,
    cloneDataView = _cloneDataView,
    cloneRegExp = _cloneRegExp,
    cloneSymbol = _cloneSymbol,
    cloneTypedArray$1 = _cloneTypedArray;

/** `Object#toString` result references. */
var boolTag$2 = '[object Boolean]',
    dateTag$2 = '[object Date]',
    mapTag$3 = '[object Map]',
    numberTag$2 = '[object Number]',
    regexpTag$2 = '[object RegExp]',
    setTag$3 = '[object Set]',
    stringTag$2 = '[object String]',
    symbolTag$3 = '[object Symbol]';

var arrayBufferTag$2 = '[object ArrayBuffer]',
    dataViewTag$2 = '[object DataView]',
    float32Tag$1 = '[object Float32Array]',
    float64Tag$1 = '[object Float64Array]',
    int8Tag$1 = '[object Int8Array]',
    int16Tag$1 = '[object Int16Array]',
    int32Tag$1 = '[object Int32Array]',
    uint8Tag$1 = '[object Uint8Array]',
    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
    uint16Tag$1 = '[object Uint16Array]',
    uint32Tag$1 = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag$1(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag$2:
      return cloneArrayBuffer(object);

    case boolTag$2:
    case dateTag$2:
      return new Ctor(+object);

    case dataViewTag$2:
      return cloneDataView(object, isDeep);

    case float32Tag$1: case float64Tag$1:
    case int8Tag$1: case int16Tag$1: case int32Tag$1:
    case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
      return cloneTypedArray$1(object, isDeep);

    case mapTag$3:
      return new Ctor;

    case numberTag$2:
    case stringTag$2:
      return new Ctor(object);

    case regexpTag$2:
      return cloneRegExp(object);

    case setTag$3:
      return new Ctor;

    case symbolTag$3:
      return cloneSymbol(object);
  }
}

var _initCloneByTag = initCloneByTag$1;

var isObject$5 = isObject_1;

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate$1 = (function() {
  function object() {}
  return function(proto) {
    if (!isObject$5(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

var _baseCreate = baseCreate$1;

var baseCreate = _baseCreate,
    getPrototype$1 = _getPrototype,
    isPrototype = _isPrototype;

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject$2(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype$1(object))
    : {};
}

var _initCloneObject = initCloneObject$2;

var getTag$3 = _getTag,
    isObjectLike$5 = isObjectLike_1;

/** `Object#toString` result references. */
var mapTag$2 = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap$1(value) {
  return isObjectLike$5(value) && getTag$3(value) == mapTag$2;
}

var _baseIsMap = baseIsMap$1;

var baseIsMap = _baseIsMap,
    baseUnary$1 = _baseUnary,
    nodeUtil$1 = _nodeUtil.exports;

/* Node.js helper references. */
var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap$1 = nodeIsMap ? baseUnary$1(nodeIsMap) : baseIsMap;

var isMap_1 = isMap$1;

var getTag$2 = _getTag,
    isObjectLike$4 = isObjectLike_1;

/** `Object#toString` result references. */
var setTag$2 = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet$1(value) {
  return isObjectLike$4(value) && getTag$2(value) == setTag$2;
}

var _baseIsSet = baseIsSet$1;

var baseIsSet = _baseIsSet,
    baseUnary = _baseUnary,
    nodeUtil = _nodeUtil.exports;

/* Node.js helper references. */
var nodeIsSet = nodeUtil && nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet$1 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

var isSet_1 = isSet$1;

var Stack$2 = _Stack,
    arrayEach = _arrayEach,
    assignValue$1 = _assignValue,
    baseAssign = _baseAssign,
    baseAssignIn = _baseAssignIn,
    cloneBuffer$1 = _cloneBuffer.exports,
    copyArray$1 = _copyArray,
    copySymbols = _copySymbols,
    copySymbolsIn = _copySymbolsIn,
    getAllKeys$1 = _getAllKeys,
    getAllKeysIn = _getAllKeysIn,
    getTag$1 = _getTag,
    initCloneArray = _initCloneArray,
    initCloneByTag = _initCloneByTag,
    initCloneObject$1 = _initCloneObject,
    isArray$5 = isArray_1,
    isBuffer$2 = isBuffer$4.exports,
    isMap = isMap_1,
    isObject$4 = isObject_1,
    isSet = isSet_1,
    keys = keys_1,
    keysIn$2 = keysIn_1;

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG$1 = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG$1 = 4;

/** `Object#toString` result references. */
var argsTag$1 = '[object Arguments]',
    arrayTag$1 = '[object Array]',
    boolTag$1 = '[object Boolean]',
    dateTag$1 = '[object Date]',
    errorTag$1 = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag$1 = '[object Map]',
    numberTag$1 = '[object Number]',
    objectTag$2 = '[object Object]',
    regexpTag$1 = '[object RegExp]',
    setTag$1 = '[object Set]',
    stringTag$1 = '[object String]',
    symbolTag$2 = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag$1 = '[object ArrayBuffer]',
    dataViewTag$1 = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] =
cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] =
cloneableTags[boolTag$1] = cloneableTags[dateTag$1] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag$1] =
cloneableTags[numberTag$1] = cloneableTags[objectTag$2] =
cloneableTags[regexpTag$1] = cloneableTags[setTag$1] =
cloneableTags[stringTag$1] = cloneableTags[symbolTag$2] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag$1] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone$1(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG$1,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG$1;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject$4(value)) {
    return value;
  }
  var isArr = isArray$5(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray$1(value, result);
    }
  } else {
    var tag = getTag$1(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer$2(value)) {
      return cloneBuffer$1(value, isDeep);
    }
    if (tag == objectTag$2 || tag == argsTag$1 || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject$1(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack$2);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone$1(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone$1(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys$1)
    : (isFlat ? keysIn$2 : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue$1(result, key, baseClone$1(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

var _baseClone = baseClone$1;

var baseClone = _baseClone;

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

var cloneDeep_1 = cloneDeep;

var baseGetTag$1 = _baseGetTag,
    isObjectLike$3 = isObjectLike_1;

/** `Object#toString` result references. */
var symbolTag$1 = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol$3(value) {
  return typeof value == 'symbol' ||
    (isObjectLike$3(value) && baseGetTag$1(value) == symbolTag$1);
}

var isSymbol_1 = isSymbol$3;

var isArray$4 = isArray_1,
    isSymbol$2 = isSymbol_1;

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey$1(value, object) {
  if (isArray$4(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol$2(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

var _isKey = isKey$1;

var MapCache$1 = _MapCache;

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize$1(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize$1.Cache || MapCache$1);
  return memoized;
}

// Expose `MapCache`.
memoize$1.Cache = MapCache$1;

var memoize_1 = memoize$1;

var memoize = memoize_1;

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped$1(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

var _memoizeCapped = memoizeCapped$1;

var memoizeCapped = _memoizeCapped;

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath$1 = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

var _stringToPath = stringToPath$1;

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */

function arrayMap$1(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

var _arrayMap = arrayMap$1;

var Symbol$2 = _Symbol,
    arrayMap = _arrayMap,
    isArray$3 = isArray_1,
    isSymbol$1 = isSymbol_1;

/** Used as references for various `Number` constants. */
var INFINITY$1 = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : undefined,
    symbolToString = symbolProto$1 ? symbolProto$1.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString$1(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray$3(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString$1) + '';
  }
  if (isSymbol$1(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
}

var _baseToString = baseToString$1;

var baseToString = _baseToString;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString$1(value) {
  return value == null ? '' : baseToString(value);
}

var toString_1 = toString$1;

var isArray$2 = isArray_1,
    isKey = _isKey,
    stringToPath = _stringToPath,
    toString = toString_1;

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath$1(value, object) {
  if (isArray$2(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

var _castPath = castPath$1;

var isSymbol = isSymbol_1;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey$1(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

var _toKey = toKey$1;

var assignValue = _assignValue,
    castPath = _castPath,
    isIndex$1 = _isIndex,
    isObject$3 = isObject_1,
    toKey = _toKey;

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet$1(object, path, value, customizer) {
  if (!isObject$3(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
      return object;
    }

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject$3(objValue)
          ? objValue
          : (isIndex$1(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

var _baseSet = baseSet$1;

var baseSet = _baseSet;

/**
 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
 * it's created. Arrays are created for missing index properties while objects
 * are created for all other missing properties. Use `_.setWith` to customize
 * `path` creation.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.set(object, 'a[0].b.c', 4);
 * console.log(object.a[0].b.c);
 * // => 4
 *
 * _.set(object, ['x', '0', 'y', 'z'], 5);
 * console.log(object.x[0].y.z);
 * // => 5
 */
function set(object, path, value) {
  return object == null ? object : baseSet(object, path, value);
}

var set_1 = set;

/**
 * Chat provider is used to configure various common options and feed the components with data.
 * It expects at least a "current" channel to display within components.
 *
 * Chat itself is supposed to be wrapped with a PubNubProvider component that is a part of the
 * PubNub React SDK. You should use it to pre-configure your PubNub instance. Please see Getting
 * Started page for details.
 */
var Chat = /** @class */ (function (_super) {
    __extends(Chat, _super);
    function Chat(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { error: null };
        return _this;
    }
    Chat.getDerivedStateFromError = function (error) {
        return { error: error };
    };
    Chat.prototype.componentDidCatch = function (error) {
        if (this.props.onError)
            this.props.onError(error);
    };
    Chat.prototype.render = function () {
        return (React__default["default"].createElement(Provider, null,
            React__default["default"].createElement(ChatInternal, __assign({}, this.props))));
    };
    Chat.defaultProps = {
        channels: [],
        channelGroups: [],
        theme: "light",
        enablePresence: true,
        typingIndicatorTimeout: 10,
        users: [],
        retryOptions: {
            maxRetries: 1,
            timeout: 0,
            exponentialFactor: 1,
        },
        onError: function () { return void 0; },
    };
    return Chat;
}(React.Component));
/**
 *
 *  Internal Chat wrapper with all business logic
 *
 */
var ChatInternal = function (props) {
    var pubnub = pubnubReact.usePubNub();
    var _a = useAtom(MessagesAtom), setMessages = _a[1];
    var _b = useAtom(ThemeAtom), setTheme = _b[1];
    var _c = useAtom(ErrorFunctionAtom), setErrorFunction = _c[1];
    var _d = useAtom(RetryFunctionAtom), setRetryFunction = _d[1];
    var _e = useAtom(MissingUserCallbackAtom), setMissingUserCallback = _e[1];
    var _f = useAtom(RequestMissingUserAtom), requestMissingUser = _f[1];
    var _g = useAtom(TypingIndicatorAtom), setTypingIndicator = _g[1];
    var _h = useAtom(TypingIndicatorTimeoutAtom), setTypingIndicatorTimeout = _h[1];
    var _j = useAtom(UsersMetaAtom), usersMeta = _j[0], setUsersMeta = _j[1];
    var _k = useAtom(CurrentChannelAtom), currentChannel = _k[0], setCurrentChannel = _k[1];
    var _l = useAtom(SubscribeChannelsAtom), channels = _l[0], setChannels = _l[1];
    var _m = useAtom(SubscribeChannelGroupsAtom), channelGroups = _m[0], setChannelGroups = _m[1];
    /**
     * Destructure props to easily pass them to dependency arrays
     */
    var childrenProp = props.children, _o = props.theme, themeProp = _o === void 0 ? "light" : _o, currentChannelProp = props.currentChannel, _p = props.channels, channelsProp = _p === void 0 ? [] : _p, _q = props.channelGroups, channelGroupsProp = _q === void 0 ? [] : _q, enablePresenceProp = props.enablePresence, _r = props.users, usersProp = _r === void 0 ? [] : _r, getUserProp = props.getUser, _s = props.typingIndicatorTimeout, typingIndicatorTimeoutProp = _s === void 0 ? 10 : _s, retryOptionsProp = props.retryOptions, onMessageProp = props.onMessage, onSignalProp = props.onSignal, onMessageActionProp = props.onMessageAction, onPresenceProp = props.onPresence, onUserProp = props.onUser, onChannelProp = props.onChannel, onMembershipProp = props.onMembership, onFileProp = props.onFile, onStatusProp = props.onStatus, _t = props.onError, onErrorProp = _t === void 0 ? function () { return null; } : _t;
    /**
     * Helpers
     */
    var retryOnError = React.useCallback(function (fn) { return __awaiter(void 0, void 0, void 0, function () {
        var _a, maxRetries, timeout, exponentialFactor, _loop_1, i, state_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = retryOptionsProp, maxRetries = _a.maxRetries, timeout = _a.timeout, exponentialFactor = _a.exponentialFactor;
                    _loop_1 = function (i) {
                        var _c, error_1;
                        return __generator(this, function (_d) {
                            switch (_d.label) {
                                case 0:
                                    _d.trys.push([0, 2, , 4]);
                                    _c = {};
                                    return [4 /*yield*/, fn()];
                                case 1: return [2 /*return*/, (_c.value = _d.sent(), _c)];
                                case 2:
                                    error_1 = _d.sent();
                                    if (maxRetries === i + 1)
                                        throw error_1;
                                    return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, timeout * Math.pow(exponentialFactor, i)); })];
                                case 3:
                                    _d.sent();
                                    return [3 /*break*/, 4];
                                case 4: return [2 /*return*/];
                            }
                        });
                    };
                    i = 0;
                    _b.label = 1;
                case 1:
                    if (!(i < maxRetries)) return [3 /*break*/, 4];
                    return [5 /*yield**/, _loop_1(i)];
                case 2:
                    state_1 = _b.sent();
                    if (typeof state_1 === "object")
                        return [2 /*return*/, state_1.value];
                    _b.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    }); }, [retryOptionsProp]);
    /**
     * Event handlers
     */
    var handleMessage = React.useCallback(function (message) {
        try {
            if (!usersMeta.find(function (u) { return u.id === message.publisher; }))
                requestMissingUser(message.publisher);
            setMessages(function (messages) {
                var messagesClone = cloneDeep_1(messages) || {};
                messagesClone[message.channel] = messagesClone[message.channel] || [];
                messagesClone[message.channel].push(message);
                return messagesClone;
            });
            if (onMessageProp)
                onMessageProp(message);
        }
        catch (e) {
            onErrorProp(e);
        }
    }, [onErrorProp, onMessageProp, requestMissingUser, setMessages, usersMeta]);
    var handleSignalEvent = React.useCallback(function (signal) {
        try {
            if (["typing_on", "typing_off"].includes(signal.message.type)) {
                if (!usersMeta.find(function (u) { return u.id === signal.publisher; }))
                    requestMissingUser(signal.publisher);
                setTypingIndicator(function (indicators) {
                    var indicatorsClone = cloneDeep_1(indicators);
                    var value = signal.message.type === "typing_on" ? signal.timetoken : null;
                    set_1(indicatorsClone, [signal.channel, signal.publisher], value);
                    return indicatorsClone;
                });
            }
            if (onSignalProp)
                onSignalProp(signal);
        }
        catch (e) {
            onErrorProp(e);
        }
    }, [onErrorProp, onSignalProp, requestMissingUser, setTypingIndicator, usersMeta]);
    var handlePresenceEvent = React.useCallback(function (event) {
        try {
            if (onPresenceProp)
                onPresenceProp(event);
        }
        catch (e) {
            onErrorProp(e);
        }
    }, [onPresenceProp, onErrorProp]);
    var handleObjectsEvent = React.useCallback(function (event) {
        try {
            if (event.message.type === "membership" && onMembershipProp)
                onMembershipProp(event);
            if (event.message.type === "channel" && onChannelProp)
                onChannelProp(event);
            if (event.message.type === "uuid" && onUserProp)
                onUserProp(event);
        }
        catch (e) {
            onErrorProp(e);
        }
    }, [onMembershipProp, onChannelProp, onUserProp, onErrorProp]);
    var handleAction = React.useCallback(function (action) {
        try {
            if (!usersMeta.find(function (u) { return u.id === action.publisher; }))
                requestMissingUser(action.publisher);
            setMessages(function (messages) {
                var _a, _b, _c, _d;
                if (!messages || !messages[action.channel])
                    return messages;
                var channel = action.channel, event = action.event;
                var _e = action.data, type = _e.type, value = _e.value, actionTimetoken = _e.actionTimetoken, messageTimetoken = _e.messageTimetoken, uuid = _e.uuid;
                var messagesClone = cloneDeep_1(messages);
                var message = messagesClone[channel].find(function (m) { return m.timetoken === messageTimetoken; });
                var actions = ((_b = (_a = message === null || message === void 0 ? void 0 : message.actions) === null || _a === void 0 ? void 0 : _a[type]) === null || _b === void 0 ? void 0 : _b[value]) || [];
                if (message && event === "added") {
                    var newActions = __spreadArray(__spreadArray([], actions, true), [{ uuid: uuid, actionTimetoken: actionTimetoken }], false);
                    set_1(message, ["actions", type, value], newActions);
                }
                if (message && event === "removed") {
                    var newActions = actions.filter(function (a) { return a.actionTimetoken !== actionTimetoken; });
                    newActions.length
                        ? set_1(message, ["actions", type, value], newActions)
                        : (_d = (_c = message.actions) === null || _c === void 0 ? void 0 : _c[type]) === null || _d === void 0 ? true : delete _d[value];
                }
                return messagesClone;
            });
            if (onMessageActionProp)
                onMessageActionProp(action);
        }
        catch (e) {
            onErrorProp(e);
        }
    }, [onErrorProp, onMessageActionProp, requestMissingUser, setMessages, usersMeta]);
    var handleFileEvent = React.useCallback(function (event) {
        try {
            if (!usersMeta.find(function (u) { return u.id === event.publisher; }))
                requestMissingUser(event.publisher);
            setMessages(function (messages) {
                var file = event.file, message = event.message, payload = __rest(event, ["file", "message"]);
                var newMessage = __assign(__assign({}, payload), { message: { file: file, message: message }, messageType: 4 });
                var messagesClone = cloneDeep_1(messages) || {};
                messagesClone[newMessage.channel] = messagesClone[newMessage.channel] || [];
                messagesClone[newMessage.channel].push(newMessage);
                return messagesClone;
            });
            if (onFileProp)
                onFileProp(event);
        }
        catch (e) {
            onErrorProp(e);
        }
    }, [onErrorProp, onFileProp, requestMissingUser, setMessages, usersMeta]);
    var handleStatusEvent = React.useCallback(function (event) {
        try {
            if (onStatusProp)
                onStatusProp(event);
        }
        catch (e) {
            onErrorProp(e);
        }
    }, [onStatusProp, onErrorProp]);
    /**
     * Lifecycle: load updateable props
     */
    React.useEffect(function () {
        setUsersMeta(usersProp);
    }, [usersProp, setUsersMeta]);
    React.useEffect(function () {
        setTheme(themeProp);
    }, [themeProp, setTheme]);
    React.useEffect(function () {
        setCurrentChannel(currentChannelProp);
    }, [currentChannelProp, setCurrentChannel]);
    React.useEffect(function () {
        setChannels(channelsProp);
    }, [channelsProp, setChannels]);
    React.useEffect(function () {
        setChannelGroups(channelGroupsProp);
    }, [channelGroupsProp, setChannelGroups]);
    React.useEffect(function () {
        setTypingIndicatorTimeout(typingIndicatorTimeoutProp);
    }, [typingIndicatorTimeoutProp, setTypingIndicatorTimeout]);
    React.useEffect(function () {
        setErrorFunction({ function: function (error) { return onErrorProp(error); } });
    }, [onErrorProp, setErrorFunction]);
    React.useEffect(function () {
        setRetryFunction({ function: function (fn) { return retryOnError(fn); } });
    }, [retryOnError, setRetryFunction]);
    React.useEffect(function () {
        if (getUserProp)
            setMissingUserCallback({ function: function (userId) { return getUserProp(userId); } });
    }, [getUserProp, setMissingUserCallback]);
    /**
     * Lifecycle: use currentChannel for subscriptions when neither channels nor channelGroups is passed
     */
    React.useEffect(function () {
        if (!currentChannel)
            return;
        if (!channels.includes(currentChannel) && !channelsProp.length && !channelGroupsProp.length) {
            setChannels(__spreadArray(__spreadArray([], channels, true), [currentChannel], false));
        }
    }, [currentChannel, channels, channelsProp.length, channelGroupsProp.length, setChannels]);
    /**
     * Lifecycle: setup correct subscriptions based on channels and channelGroups
     */
    React.useEffect(function () {
        if (!channels.length && !channelGroups.length)
            return;
        var currentSubscriptions = pubnub.getSubscribedChannels();
        var currentGroups = pubnub.getSubscribedChannelGroups();
        try {
            var newChannels = channels.filter(function (c) { return !currentSubscriptions.includes(c); });
            var oldChannels = currentSubscriptions.filter(function (c) { return !channels.includes(c); });
            var newGroups = channelGroups.filter(function (c) { return !currentGroups.includes(c); });
            var oldGroups = currentGroups.filter(function (c) { return !channelGroups.includes(c); });
            if (newChannels.length || newGroups.length) {
                pubnub.subscribe({
                    channels: newChannels,
                    channelGroups: newGroups,
                    withPresence: enablePresenceProp,
                });
            }
            if (oldChannels.length || oldGroups.length) {
                pubnub.unsubscribe({
                    channels: oldChannels,
                    channelGroups: oldGroups,
                });
            }
        }
        catch (e) {
            onErrorProp(e);
        }
    }, [channels, channelGroups, enablePresenceProp, onErrorProp, pubnub]);
    /**
     * Lifecycle: setup event listeners
     */
    React.useEffect(function () {
        if (!pubnub)
            return;
        var listener = {
            message: function (m) { return handleMessage(m); },
            messageAction: function (m) { return handleAction(m); },
            presence: function (e) { return handlePresenceEvent(e); },
            objects: function (e) { return handleObjectsEvent(e); },
            signal: function (e) { return handleSignalEvent(e); },
            file: function (e) { return handleFileEvent(e); },
            status: function (e) { return handleStatusEvent(e); },
        };
        try {
            pubnub.addListener(listener);
        }
        catch (e) {
            onErrorProp(e);
        }
        return function () {
            if (pubnub && pubnub.removeListener) {
                pubnub.removeListener(listener);
            }
        };
    }, [
        pubnub,
        handleMessage,
        handleAction,
        handlePresenceEvent,
        handleObjectsEvent,
        handleSignalEvent,
        handleFileEvent,
        handleStatusEvent,
        onErrorProp,
    ]);
    /**
     * Lifecycle: add telemetry config to PubNub instance
     */
    React.useEffect(function () {
        if (!pubnub)
            return;
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        pubnub._config._addPnsdkSuffix("chat-components", "RCC/0.30.0");
    }, [pubnub]);
    return React__default["default"].createElement(React__default["default"].Fragment, null, childrenProp);
};

var getNameInitials = function (name) {
    if (!name || !name.length)
        return "";
    var nameSplit = name.split(" ");
    var initials = nameSplit.length == 1 ? nameSplit[0].substring(0, 2) : nameSplit[0][0] + nameSplit[1][0];
    return initials.toUpperCase();
};
var getPredefinedColor = function (uuid) {
    if (!uuid || !uuid.length)
        return;
    var colors = ["#80deea", "#9fa7df", "#aed581", "#ce93d8", "#ef9a9a", "#ffab91", "#ffe082"];
    var sum = uuid
        .split("")
        .map(function (c) { return c.charCodeAt(0); })
        .reduce(function (a, b) { return a + b; });
    return colors[sum % colors.length];
};
var usePrevious = function (value) {
    var ref = React.useRef(value);
    React.useEffect(function () {
        ref.current = value;
    }, [value]);
    return ref.current;
};
function isFilePayload(message) {
    return message.file !== undefined;
}

var baseAssignValue = _baseAssignValue,
    eq$2 = eq_1;

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue$2(object, key, value) {
  if ((value !== undefined && !eq$2(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

var _assignMergeValue = assignMergeValue$2;

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */

function createBaseFor$1(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

var _createBaseFor = createBaseFor$1;

var createBaseFor = _createBaseFor;

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor$1 = createBaseFor();

var _baseFor = baseFor$1;

var isArrayLike$1 = isArrayLike_1,
    isObjectLike$2 = isObjectLike_1;

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject$1(value) {
  return isObjectLike$2(value) && isArrayLike$1(value);
}

var isArrayLikeObject_1 = isArrayLikeObject$1;

var baseGetTag = _baseGetTag,
    getPrototype = _getPrototype,
    isObjectLike$1 = isObjectLike_1;

/** `Object#toString` result references. */
var objectTag$1 = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto$2 = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject$1(value) {
  if (!isObjectLike$1(value) || baseGetTag(value) != objectTag$1) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty$2.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

var isPlainObject_1 = isPlainObject$1;

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

function safeGet$2(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

var _safeGet = safeGet$2;

var copyObject = _copyObject,
    keysIn$1 = keysIn_1;

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject$1(value) {
  return copyObject(value, keysIn$1(value));
}

var toPlainObject_1 = toPlainObject$1;

var assignMergeValue$1 = _assignMergeValue,
    cloneBuffer = _cloneBuffer.exports,
    cloneTypedArray = _cloneTypedArray,
    copyArray = _copyArray,
    initCloneObject = _initCloneObject,
    isArguments = isArguments_1,
    isArray$1 = isArray_1,
    isArrayLikeObject = isArrayLikeObject_1,
    isBuffer$1 = isBuffer$4.exports,
    isFunction = isFunction_1,
    isObject$2 = isObject_1,
    isPlainObject = isPlainObject_1,
    isTypedArray$1 = isTypedArray_1,
    safeGet$1 = _safeGet,
    toPlainObject = toPlainObject_1;

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet$1(object, key),
      srcValue = safeGet$1(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue$1(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray$1(srcValue),
        isBuff = !isArr && isBuffer$1(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray$1(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray$1(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject$2(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue$1(object, key, newValue);
}

var _baseMergeDeep = baseMergeDeep$1;

var Stack$1 = _Stack,
    assignMergeValue = _assignMergeValue,
    baseFor = _baseFor,
    baseMergeDeep = _baseMergeDeep,
    isObject$1 = isObject_1,
    keysIn = keysIn_1,
    safeGet = _safeGet;

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge$2(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function(srcValue, key) {
    stack || (stack = new Stack$1);
    if (isObject$1(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge$2, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}

var _baseMerge = baseMerge$2;

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */

function identity$2(value) {
  return value;
}

var identity_1 = identity$2;

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */

function apply$1(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

var _apply = apply$1;

var apply = _apply;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest$1(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

var _overRest = overRest$1;

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */

function constant$1(value) {
  return function() {
    return value;
  };
}

var constant_1 = constant$1;

var constant = constant_1,
    defineProperty = _defineProperty,
    identity$1 = identity_1;

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString$1 = !defineProperty ? identity$1 : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

var _baseSetToString = baseSetToString$1;

/** Used to detect hot functions by number of calls within a span of milliseconds. */

var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut$1(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

var _shortOut = shortOut$1;

var baseSetToString = _baseSetToString,
    shortOut = _shortOut;

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString$1 = shortOut(baseSetToString);

var _setToString = setToString$1;

var identity = identity_1,
    overRest = _overRest,
    setToString = _setToString;

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest$1(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

var _baseRest = baseRest$1;

var eq$1 = eq_1,
    isArrayLike = isArrayLike_1,
    isIndex = _isIndex,
    isObject = isObject_1;

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall$1(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq$1(object[index], value);
  }
  return false;
}

var _isIterateeCall = isIterateeCall$1;

var baseRest = _baseRest,
    isIterateeCall = _isIterateeCall;

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner$2(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

var _createAssigner = createAssigner$2;

var baseMerge$1 = _baseMerge,
    createAssigner$1 = _createAssigner;

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner$1(function(object, source, srcIndex) {
  baseMerge$1(object, source, srcIndex);
});

var merge_1 = merge;

var baseMerge = _baseMerge,
    createAssigner = _createAssigner;

/**
 * This method is like `_.merge` except that it accepts `customizer` which
 * is invoked to produce the merged values of the destination and source
 * properties. If `customizer` returns `undefined`, merging is handled by the
 * method instead. The `customizer` is invoked with six arguments:
 * (objValue, srcValue, key, object, source, stack).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   if (_.isArray(objValue)) {
 *     return objValue.concat(srcValue);
 *   }
 * }
 *
 * var object = { 'a': [1], 'b': [2] };
 * var other = { 'a': [3], 'b': [4] };
 *
 * _.mergeWith(object, other, customizer);
 * // => { 'a': [1, 3], 'b': [2, 4] }
 */
var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
  baseMerge(object, source, srcIndex, customizer);
});

var mergeWith_1 = mergeWith;

var useMessages = function (options) {
    var pubnub = pubnubReact.usePubNub();
    var _a = React.useState(function () {
        var initial = {};
        options.channels.forEach(function (channel) { return (initial[channel] = []); });
        return initial;
    }), messages = _a[0], setMessages = _a[1];
    var _b = React.useState(undefined), page = _b[0], setPage = _b[1];
    var _c = React.useState(false), fetchedAll = _c[0], setFetchedAll = _c[1];
    var _d = React.useState(), error = _d[0], setError = _d[1];
    var mandatoryOptions = {
        start: page,
    };
    var mergedOptions = merge_1(options, mandatoryOptions);
    var command = function () { return __awaiter(void 0, void 0, void 0, function () {
        var response, newMessages, earliestMessageTimetokens, lastTimetoken, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    if (fetchedAll)
                        return [2 /*return*/];
                    return [4 /*yield*/, pubnub.fetchMessages(mergedOptions)];
                case 1:
                    response = _a.sent();
                    newMessages = mergeWith_1({}, messages, response.channels, mergeMessageArray);
                    earliestMessageTimetokens = Object.values(response.channels)
                        .flatMap(function (ary) { return ary[0]; })
                        .map(function (a) { return a.timetoken; });
                    lastTimetoken = Math.min.apply(Math, earliestMessageTimetokens);
                    setMessages(newMessages);
                    setPage(lastTimetoken - 1);
                    setFetchedAll(!Object.keys(response.channels).length);
                    return [3 /*break*/, 3];
                case 2:
                    e_1 = _a.sent();
                    setError(e_1);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); };
    var handleMessage = function (message) {
        try {
            setMessages(function (messages) {
                var messagesClone = cloneDeep_1(messages);
                if (!messagesClone[message.channel])
                    messagesClone[message.channel] = [];
                messagesClone[message.channel].push(message);
                return messagesClone;
            });
        }
        catch (e) {
            setError(e);
        }
    };
    var handleAction = function (action) {
        try {
            if (!messages[action.channel])
                return;
            setMessages(function (messages) {
                var _a, _b;
                var channel = action.channel, event = action.event;
                var _c = action.data, type = _c.type, value = _c.value, actionTimetoken = _c.actionTimetoken, messageTimetoken = _c.messageTimetoken, uuid = _c.uuid;
                var messagesClone = cloneDeep_1(messages);
                var message = messagesClone[channel].find(function (m) { return m.timetoken === messageTimetoken; });
                var actions = ((_b = (_a = message === null || message === void 0 ? void 0 : message.actions) === null || _a === void 0 ? void 0 : _a[type]) === null || _b === void 0 ? void 0 : _b[value]) || [];
                if (message && event === "added") {
                    var newActions = __spreadArray(__spreadArray([], actions, true), [{ uuid: uuid, actionTimetoken: actionTimetoken }], false);
                    set_1(message, ["actions", type, value], newActions);
                }
                if (message && event === "removed") {
                    var newActions = actions.filter(function (a) { return a.actionTimetoken !== actionTimetoken; });
                    newActions.length
                        ? set_1(message, ["actions", type, value], newActions)
                        : delete message.actions[type][value];
                }
                return messagesClone;
            });
        }
        catch (e) {
            setError(e);
        }
    };
    var listener = React.useRef({
        message: handleMessage,
        messageAction: handleAction,
    });
    React.useEffect(function () {
        command();
        pubnub.addListener(listener.current);
        return function () {
            pubnub.removeListener(listener.current);
        };
    }, [pubnub]);
    return [messages, command, error];
};
var mergeMessageArray = function (oldMessages, newMessages) {
    if (Array.isArray(oldMessages)) {
        return __spreadArray(__spreadArray([], oldMessages, true), newMessages, true).sort(function (a, b) { return a.timetoken - b.timetoken; });
    }
};

var usePresence = function (options) {
    if (options === void 0) { options = {}; }
    var jsonOptions = JSON.stringify(options);
    var pubnub = pubnubReact.usePubNub();
    var _a = React.useState({}), presence = _a[0], setPresence = _a[1];
    var _b = React.useState(), error = _b[0], setError = _b[1];
    var _c = React.useState(true), doFetch = _c[0], setDoFetch = _c[1];
    var presenceValues = Object.values(presence);
    var total = presenceValues.map(function (ch) { return ch.occupancy; }).reduce(function (prev, cur) { return prev + cur; }, 0);
    var resetHook = function () {
        setPresence({});
        setError(undefined);
        setDoFetch(true);
    };
    React.useEffect(function () {
        resetHook();
    }, [jsonOptions]);
    React.useEffect(function () {
        var ignoreRequest = false;
        if (doFetch)
            fetch();
        function fetch() {
            return __awaiter(this, void 0, void 0, function () {
                var response, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, pubnub.hereNow(JSON.parse(jsonOptions))];
                        case 1:
                            response = _a.sent();
                            if (ignoreRequest)
                                return [2 /*return*/];
                            setDoFetch(false);
                            setPresence(response.channels);
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _a.sent();
                            setDoFetch(false);
                            setError(e_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        }
        return function () {
            ignoreRequest = true;
        };
    }, [pubnub, doFetch, jsonOptions]);
    React.useEffect(function () {
        var listener = {
            presence: function (event) {
                setPresence(function (presence) {
                    var presenceClone = cloneDeep_1(presence);
                    if (!presenceClone[event.channel])
                        presenceClone[event.channel] = { name: event.channel, occupancy: 0, occupants: [] };
                    var channel = presenceClone[event.channel];
                    if (event.action === "join") {
                        if (!channel.hasOwnProperty("occupants"))
                            channel.occupants = [];
                        channel.occupancy = event.occupancy;
                        if (options.includeUUIDs !== false &&
                            channel.hasOwnProperty("occupants") &&
                            !channel.occupants.find(function (u) { return u.uuid == event.uuid; })) {
                            var state = event.state, uuid = event.uuid;
                            channel.occupants.push({ state: state, uuid: uuid });
                        }
                    }
                    if (["leave", "timeout"].includes(event.action)) {
                        channel.occupancy = event.occupancy;
                        if (options.includeUUIDs !== false &&
                            channel.hasOwnProperty("occupants") &&
                            channel.occupants.find(function (u) { return u.uuid == event.uuid; })) {
                            presenceClone[event.channel].occupants = channel.occupants.filter(function (u) { return u.uuid !== event.uuid; });
                        }
                    }
                    return presenceClone;
                });
            },
        };
        pubnub.addListener(listener);
        return function () {
            pubnub.removeListener(listener);
        };
    }, [pubnub, options.includeUUIDs]);
    return [presence, resetHook, total, error];
};

var useUser = function (options) {
    if (options === void 0) { options = {}; }
    var jsonOptions = JSON.stringify(options);
    var pubnub = pubnubReact.usePubNub();
    var _a = React.useState(null), user = _a[0], setUser = _a[1];
    var _b = React.useState(), error = _b[0], setError = _b[1];
    var _c = React.useState(true), doFetch = _c[0], setDoFetch = _c[1];
    var resetHook = function () {
        setUser(null);
        setError(undefined);
        setDoFetch(true);
    };
    React.useEffect(function () {
        resetHook();
    }, [jsonOptions]);
    React.useEffect(function () {
        var ignoreRequest = false;
        if (doFetch)
            fetch();
        function fetch() {
            return __awaiter(this, void 0, void 0, function () {
                var response, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, pubnub.objects.getUUIDMetadata(options)];
                        case 1:
                            response = _a.sent();
                            if (ignoreRequest)
                                return [2 /*return*/];
                            setDoFetch(false);
                            setUser(response.data);
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _a.sent();
                            setDoFetch(false);
                            setError(e_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        }
        return function () {
            ignoreRequest = true;
        };
    }, [doFetch, options, pubnub.objects]);
    React.useEffect(function () {
        var listener = {
            objects: function (event) {
                var message = event.message;
                if (message.type !== "uuid")
                    return;
                setUser(function (user) {
                    var userCopy = cloneDeep_1(user);
                    if (message.data.id == user.id) {
                        Object.assign(userCopy, message.data);
                    }
                    return userCopy;
                });
            },
        };
        pubnub.addListener(listener);
        return function () {
            pubnub.removeListener(listener);
        };
    }, [pubnub]);
    return [user, error];
};

var useSubscribe = function (options) {
    if (options === void 0) { options = {}; }
    var pubnub = pubnubReact.usePubNub();
    var unsubscribe = function () {
        pubnub.unsubscribe(options);
    };
    React.useEffect(function () {
        options.channels = options.channels || [];
        options.channelGroups = options.channelGroups || [];
        var currentSubscriptions = pubnub.getSubscribedChannels() || [];
        var currentGroups = pubnub.getSubscribedChannelGroups() || [];
        var subscribeChannels = options.channels.filter(function (c) { return !currentSubscriptions.includes(c); });
        var unsubscribeChannels = currentSubscriptions.filter(function (c) { return !options.channels.includes(c); });
        var subscribeGroups = options.channelGroups.filter(function (c) { return !currentGroups.includes(c); });
        var unsubscribeGroups = currentGroups.filter(function (c) { return !options.channelGroups.includes(c); });
        if (subscribeChannels.length || subscribeGroups.length) {
            pubnub.subscribe({
                channels: subscribeChannels,
                channelGroups: subscribeGroups,
                withPresence: options.withPresence,
            });
        }
        if (unsubscribeChannels.length || unsubscribeGroups.length) {
            pubnub.unsubscribe({
                channels: unsubscribeChannels,
                channelGroups: unsubscribeGroups,
            });
        }
    }, [JSON.stringify(options.channels), JSON.stringify(options.channelGroups)]);
    return unsubscribe;
};

var useUsers = function (options) {
    if (options === void 0) { options = {}; }
    var pubnub = pubnubReact.usePubNub();
    var _a = React.useState([]), users = _a[0], setUsers = _a[1];
    var _b = React.useState(0), totalCount = _b[0], setTotalCount = _b[1];
    var _c = React.useState(""), page = _c[0], setPage = _c[1];
    var _d = React.useState(), error = _d[0], setError = _d[1];
    var _e = React.useState(true), doFetch = _e[0], setDoFetch = _e[1];
    var paginatedOptions = merge_1({}, options, {
        page: { next: page },
        include: { totalCount: true },
    });
    var fetchMoreUsers = function () {
        setDoFetch(true);
    };
    React.useEffect(function () {
        var ignoreRequest = false;
        if (doFetch)
            fetchPage();
        function fetchPage() {
            return __awaiter(this, void 0, void 0, function () {
                var response_1, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            if (totalCount && users.length >= totalCount)
                                return [2 /*return*/];
                            return [4 /*yield*/, pubnub.objects.getAllUUIDMetadata(paginatedOptions)];
                        case 1:
                            response_1 = _a.sent();
                            if (ignoreRequest)
                                return [2 /*return*/];
                            setDoFetch(false);
                            setUsers(function (users) { return __spreadArray(__spreadArray([], users, true), response_1.data, true); });
                            setTotalCount(response_1.totalCount);
                            setPage(response_1.next);
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _a.sent();
                            setDoFetch(false);
                            setError(e_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        }
        return function () {
            ignoreRequest = true;
        };
    }, [doFetch, paginatedOptions, pubnub.objects, totalCount, users.length]);
    React.useEffect(function () {
        var listener = {
            objects: function (event) {
                var message = event.message;
                if (message.type !== "uuid")
                    return;
                setUsers(function (users) {
                    var usersCopy = cloneDeep_1(users);
                    var user = usersCopy.find(function (u) { return u.id === message.data.id; });
                    // Set events are only handled for already fetched users in order to conform to filters and pagination
                    if (user && message.event === "set") {
                        Object.assign(user, message.data);
                    }
                    if (user && message.event === "delete") {
                        usersCopy.splice(usersCopy.indexOf(user), 1);
                    }
                    return usersCopy;
                });
            },
        };
        pubnub.addListener(listener);
        return function () {
            pubnub.removeListener(listener);
        };
    }, [pubnub]);
    return [users, fetchMoreUsers, totalCount, error];
};

var useChannels = function (options) {
    if (options === void 0) { options = {}; }
    var pubnub = pubnubReact.usePubNub();
    var _a = React.useState([]), channels = _a[0], setChannels = _a[1];
    var _b = React.useState(""), page = _b[0], setPage = _b[1];
    var _c = React.useState(0), totalCount = _c[0], setTotalCount = _c[1];
    var _d = React.useState(), error = _d[0], setError = _d[1];
    var _e = React.useState(true), doFetch = _e[0], setDoFetch = _e[1];
    var paginatedOptions = merge_1({}, options, {
        page: { next: page },
        include: { totalCount: true },
    });
    var fetchMoreChannels = function () {
        setDoFetch(true);
    };
    React.useEffect(function () {
        var ignoreRequest = false;
        if (doFetch)
            fetchPage();
        function fetchPage() {
            return __awaiter(this, void 0, void 0, function () {
                var response_1, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            if (totalCount && channels.length >= totalCount)
                                return [2 /*return*/];
                            return [4 /*yield*/, pubnub.objects.getAllChannelMetadata(paginatedOptions)];
                        case 1:
                            response_1 = _a.sent();
                            if (ignoreRequest)
                                return [2 /*return*/];
                            setDoFetch(false);
                            setChannels(function (channels) { return __spreadArray(__spreadArray([], channels, true), response_1.data, true); });
                            setTotalCount(response_1.totalCount);
                            setPage(response_1.next);
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _a.sent();
                            setDoFetch(false);
                            setError(e_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        }
        return function () {
            ignoreRequest = true;
        };
    }, [channels.length, doFetch, paginatedOptions, pubnub.objects, totalCount]);
    React.useEffect(function () {
        var listener = {
            objects: function (event) {
                var message = event.message;
                if (message.type !== "channel")
                    return;
                setChannels(function (channels) {
                    var channelsCopy = cloneDeep_1(channels);
                    var channel = channelsCopy.find(function (ch) { return ch.id === event.channel; });
                    // Set events are only handled for already fetched channels in order to conform to filters and pagination
                    if (channel && message.event === "set") {
                        Object.assign(channel, message.data);
                    }
                    if (channel && message.event === "delete") {
                        channelsCopy.splice(channelsCopy.indexOf(channel), 1);
                    }
                    return channelsCopy;
                });
            },
        };
        pubnub.addListener(listener);
        return function () {
            pubnub.removeListener(listener);
        };
    }, [pubnub]);
    return [channels, fetchMoreChannels, totalCount, error];
};

var useChannelMembers = function (options) {
    var jsonOptions = JSON.stringify(options);
    var pubnub = pubnubReact.usePubNub();
    var _a = React.useState([]), members = _a[0], setMembers = _a[1];
    var _b = React.useState(0), totalCount = _b[0], setTotalCount = _b[1];
    var _c = React.useState(""), page = _c[0], setPage = _c[1];
    var _d = React.useState(), error = _d[0], setError = _d[1];
    var _e = React.useState(true), doFetch = _e[0], setDoFetch = _e[1];
    var paginatedOptions = React.useMemo(function () {
        return merge_1({}, JSON.parse(jsonOptions), {
            page: { next: page },
            include: { totalCount: true },
        });
    }, [page, jsonOptions]);
    var fetchMoreMembers = function () {
        setDoFetch(true);
    };
    var resetHook = function () {
        setMembers([]);
        setTotalCount(0);
        setPage("");
        setError(undefined);
        setDoFetch(true);
    };
    React.useEffect(function () {
        resetHook();
    }, [jsonOptions]);
    React.useEffect(function () {
        var ignoreRequest = false;
        if (doFetch)
            fetchPage();
        function fetchPage() {
            return __awaiter(this, void 0, void 0, function () {
                var response_1, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            if (totalCount && members.length >= totalCount)
                                return [2 /*return*/];
                            return [4 /*yield*/, pubnub.objects.getChannelMembers(paginatedOptions)];
                        case 1:
                            response_1 = _a.sent();
                            if (ignoreRequest)
                                return [2 /*return*/];
                            setDoFetch(false);
                            setMembers(function (members) { return __spreadArray(__spreadArray([], members, true), response_1.data.map(function (m) {
                                var returnObject = __assign({}, m.uuid);
                                if (m.custom) {
                                    returnObject.membership = m.custom;
                                }
                                return returnObject;
                            }), true); });
                            setTotalCount(response_1.totalCount);
                            setPage(response_1.next);
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _a.sent();
                            setDoFetch(false);
                            setError(e_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        }
        return function () {
            ignoreRequest = true;
        };
    }, [totalCount, pubnub.objects, paginatedOptions, members.length, doFetch]);
    React.useEffect(function () {
        var listener = {
            objects: function (event) {
                var message = event.message;
                if (message.type !== "membership")
                    return;
                setMembers(function (members) {
                    var membersCopy = cloneDeep_1(members);
                    var member = membersCopy.find(function (u) { return u.id === message.data.uuid.id; });
                    // Make sure the event is for the same channel as the hook
                    if (message.data.channel.id !== paginatedOptions.channel)
                        return membersCopy;
                    // Set events are not handled since there are no events fired for data updates
                    // New memberships are not handled in order to conform to filters and pagination
                    if (member && message.event === "delete") {
                        membersCopy.splice(membersCopy.indexOf(member), 1);
                    }
                    return membersCopy;
                });
            },
        };
        pubnub.addListener(listener);
        return function () {
            pubnub.removeListener(listener);
        };
    }, [pubnub, paginatedOptions.channel]);
    return [members, fetchMoreMembers, resetHook, totalCount, error];
};

var useUserMemberships = function (options) {
    if (options === void 0) { options = {}; }
    var jsonOptions = JSON.stringify(options);
    var pubnub = pubnubReact.usePubNub();
    var _a = React.useState([]), channels = _a[0], setChannels = _a[1];
    var _b = React.useState(0), totalCount = _b[0], setTotalCount = _b[1];
    var _c = React.useState(""), page = _c[0], setPage = _c[1];
    var _d = React.useState(), error = _d[0], setError = _d[1];
    var _e = React.useState(true), doFetch = _e[0], setDoFetch = _e[1];
    var paginatedOptions = React.useMemo(function () {
        return merge_1({}, JSON.parse(jsonOptions), {
            page: { next: page },
            include: { totalCount: true },
        });
    }, [page, jsonOptions]);
    var fetchMoreMemberships = function () {
        setDoFetch(true);
    };
    var resetHook = function () {
        setChannels([]);
        setTotalCount(0);
        setPage("");
        setError(undefined);
        setDoFetch(true);
    };
    React.useEffect(function () {
        resetHook();
    }, [jsonOptions]);
    React.useEffect(function () {
        var ignoreRequest = false;
        if (doFetch)
            fetchPage();
        function fetchPage() {
            return __awaiter(this, void 0, void 0, function () {
                var response_1, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            if (totalCount && channels.length >= totalCount)
                                return [2 /*return*/];
                            return [4 /*yield*/, pubnub.objects.getMemberships(paginatedOptions)];
                        case 1:
                            response_1 = _a.sent();
                            if (ignoreRequest)
                                return [2 /*return*/];
                            setDoFetch(false);
                            setChannels(function (channels) { return __spreadArray(__spreadArray([], channels, true), response_1.data.map(function (m) {
                                var returnObject = __assign({}, m.channel);
                                if (m.custom) {
                                    returnObject.membership = m.custom;
                                }
                                return returnObject;
                            }), true); });
                            setTotalCount(response_1.totalCount);
                            setPage(response_1.next);
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _a.sent();
                            setDoFetch(false);
                            setError(e_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        }
        return function () {
            ignoreRequest = true;
        };
    }, [totalCount, pubnub.objects, paginatedOptions, channels.length, doFetch]);
    React.useEffect(function () {
        var listener = {
            objects: function (event) {
                var message = event.message;
                if (message.type !== "membership")
                    return;
                setChannels(function (channels) {
                    var channelsCopy = cloneDeep_1(channels);
                    var channel = channelsCopy.find(function (u) { return u.id === message.data.channel.id; });
                    var currentUuid = paginatedOptions.uuid || pubnub.getUUID();
                    // Make sure the event is for the same uuid as the hook
                    if (message.data.uuid.id !== currentUuid)
                        return channelsCopy;
                    // Set events are not handled since there are no events fired for data updates
                    // New memberships are not handled in order to conform to filters and pagination
                    if (channel && message.event === "delete") {
                        channelsCopy.splice(channelsCopy.indexOf(channel), 1);
                    }
                    return channelsCopy;
                });
            },
        };
        pubnub.addListener(listener);
        return function () {
            pubnub.removeListener(listener);
        };
    }, [pubnub, paginatedOptions.uuid]);
    return [channels, fetchMoreMemberships, resetHook, totalCount, error];
};

/**
 * Renders a list of members.
 *
 * It can represent all users of the application, only members of
 * the current channel, users currently subscribed/present on the channel, or whatever else is passed
 * into it. Custom memberRenderer can be used to modify how the users are rendered. For example
 * you can add presence indicators.
 */
var useMemberListCore = function (props) {
    var pubnub = pubnubReact.usePubNub();
    var theme = useAtom(ThemeAtom)[0];
    /*
    /* Helper functions
    */
    var isOwnMember = function (uuid) {
        return pubnub.getUUID() === uuid;
    };
    var isPresentMember = function (uuid) {
        var _a;
        return (_a = props.presentMembers) === null || _a === void 0 ? void 0 : _a.includes(uuid);
    };
    var memberSorter = function (a, b) {
        if (props.sort)
            return props.sort(a, b);
        if (isOwnMember(a.id))
            return -1;
        if (isOwnMember(b.id))
            return 1;
        if (isPresentMember(a.id) && !isPresentMember(b.id))
            return -1;
        if (isPresentMember(b.id) && !isPresentMember(a.id))
            return 1;
        return a.name.localeCompare(b.name, "en", { sensitivity: "base" });
    };
    var memberFromString = function (member) {
        if (typeof member === "string") {
            return {
                id: member,
                name: member,
            };
        }
        return member;
    };
    /*
    /* Commands
    */
    var clickMember = function (member) {
        if (props.onMemberClicked)
            props.onMemberClicked(member);
    };
    return {
        clickMember: clickMember,
        isOwnMember: isOwnMember,
        isPresentMember: isPresentMember,
        memberFromString: memberFromString,
        memberSorter: memberSorter,
        theme: theme,
    };
};

var dist = {};

var parse$1 = {};

var utils = {};

Object.defineProperty(utils, "__esModule", { value: true });
utils.bytesToString = utils.stringToBytes = utils.NIL = utils.X500 = utils.OID = utils.URL = utils.DNS = utils.hexToByte = utils.byteToHex = void 0;
let _byteToHex = [];
let _hexToByte = {};
for (var i = 0; i < 256; i++) {
    _byteToHex[i] = (i + 0x100).toString(16).substr(1);
    _hexToByte[_byteToHex[i]] = i;
}
utils.byteToHex = _byteToHex;
utils.hexToByte = _hexToByte;
utils.DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
utils.URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
utils.OID = '6ba7b812-9dad-11d1-80b4-00c04fd430c8';
utils.X500 = '6ba7b814-9dad-11d1-80b4-00c04fd430c8';
utils.NIL = '00000000-0000-0000-0000-000000000000';
const stringToBytes = (str) => {
    str = unescape(encodeURIComponent(str)); // UTF8 escape
    const bytes = new Uint8Array(str.length);
    for (let j = 0; j < str.length; ++j) {
        bytes[j] = str.charCodeAt(j);
    }
    return bytes;
};
utils.stringToBytes = stringToBytes;
const bytesToString = (buf) => {
    const bufferView = new Uint8Array(buf, 0, buf.byteLength);
    return String.fromCharCode.apply(null, Array.from(bufferView));
};
utils.bytesToString = bytesToString;

Object.defineProperty(parse$1, "__esModule", { value: true });
parse$1.parse = void 0;
const utils_1$3 = utils;
// **`parse()` - Parse a UUID into it's component bytes**
const parse = (s, buf, offset) => {
    let i = (buf && offset) || 0;
    let ii = 0;
    buf = buf || [];
    s.toLowerCase().replace(/[0-9a-f]{2}/g, (oct) => {
        // Don't overflow!
        if (ii < 16 && buf) {
            buf[i + ii++] = utils_1$3.hexToByte[oct];
        }
        return '';
    });
    // Zero out remaining bytes if string was short
    while (ii < 16) {
        buf[i + ii++] = 0;
    }
    return buf;
};
parse$1.parse = parse;

var unparse$1 = {};

Object.defineProperty(unparse$1, "__esModule", { value: true });
unparse$1.unparse = void 0;
const utils_1$2 = utils;
// **`unparse()` - Convert UUID byte array (ala parse()) into a string**
const unparse = (buf, offset) => {
    let i = offset || 0;
    let bth = utils_1$2.byteToHex;
    return (bth[buf[i++]] +
        bth[buf[i++]] +
        bth[buf[i++]] +
        bth[buf[i++]] +
        '-' +
        bth[buf[i++]] +
        bth[buf[i++]] +
        '-' +
        bth[buf[i++]] +
        bth[buf[i++]] +
        '-' +
        bth[buf[i++]] +
        bth[buf[i++]] +
        '-' +
        bth[buf[i++]] +
        bth[buf[i++]] +
        bth[buf[i++]] +
        bth[buf[i++]] +
        bth[buf[i++]] +
        bth[buf[i++]]);
};
unparse$1.unparse = unparse;

var validate$1 = {};

var regex = {};

Object.defineProperty(regex, "__esModule", { value: true });
const REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
regex.default = REGEX;

var __importDefault$1 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(validate$1, "__esModule", { value: true });
validate$1.validate = void 0;
const regex_1 = __importDefault$1(regex);
const validate = (uuid) => {
    return typeof uuid === 'string' && regex_1.default.test(uuid);
};
validate$1.validate = validate;

var version$1 = {};

Object.defineProperty(version$1, "__esModule", { value: true });
version$1.version = void 0;
const validate_1$2 = validate$1;
const version = (uuid) => {
    if (!validate_1$2.validate(uuid)) {
        throw TypeError('Invalid UUID');
    }
    return parseInt(uuid.substr(14, 1), 16);
};
version$1.version = version;

var v1$1 = {};

var stringify$1 = {};

Object.defineProperty(stringify$1, "__esModule", { value: true });
stringify$1.stringify = void 0;
const validate_1$1 = validate$1;
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];
for (let i = 0; i < 256; ++i) {
    byteToHex.push((i + 0x100).toString(16).substr(1));
}
const stringify = (arr, offset = 0) => {
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    const uuid = (byteToHex[arr[offset + 0]] +
        byteToHex[arr[offset + 1]] +
        byteToHex[arr[offset + 2]] +
        byteToHex[arr[offset + 3]] +
        '-' +
        byteToHex[arr[offset + 4]] +
        byteToHex[arr[offset + 5]] +
        '-' +
        byteToHex[arr[offset + 6]] +
        byteToHex[arr[offset + 7]] +
        '-' +
        byteToHex[arr[offset + 8]] +
        byteToHex[arr[offset + 9]] +
        '-' +
        byteToHex[arr[offset + 10]] +
        byteToHex[arr[offset + 11]] +
        byteToHex[arr[offset + 12]] +
        byteToHex[arr[offset + 13]] +
        byteToHex[arr[offset + 14]] +
        byteToHex[arr[offset + 15]]).toLowerCase();
    // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields
    if (!validate_1$1.validate(uuid)) {
        throw TypeError('Stringified UUID is invalid');
    }
    return uuid;
};
stringify$1.stringify = stringify;

var rng$1 = {};

/* eslint-disable no-bitwise */
// const randombytes = require('randombytes');
// export const rng = () => randombytes(16);
Object.defineProperty(rng$1, "__esModule", { value: true });
rng$1.rng = void 0;
const min = 0;
const max = 256;
const RANDOM_LENGTH = 16;
// returns pseudo random 16 bytes
const rng = () => {
    let result = new Array(RANDOM_LENGTH);
    for (let j = 0; j < RANDOM_LENGTH; j++) {
        result[j] = 0xff & (Math.random() * (max - min) + min);
    }
    return result;
};
rng$1.rng = rng;

Object.defineProperty(v1$1, "__esModule", { value: true });
v1$1.v1 = void 0;
/* eslint-disable no-bitwise */
const stringify_1$1 = stringify$1;
const rng_1$1 = rng$1;
// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;
let _clockseq;
// Previous uuid creation time
let _lastMSecs = 0;
let _lastNSecs = 0;
// See https://github.com/uuidjs/uuid for API details
const v1 = (options, buf, offset = 0) => {
    let i = (buf && offset) || 0;
    const b = buf || new Uint8Array(16);
    let node = options && options.node ? options.node : _nodeId;
    let clockseq = options && options.clockseq ? options.clockseq : _clockseq;
    // node and clockseq need to be initialized to random values if they're not
    // specified.  We do this lazily to minimize issues related to insufficient
    // system entropy.  See #189
    if (node == null || clockseq == null) {
        const seedBytes = options && options.random
            ? options.random
            : options && options.rng
                ? options.rng()
                : rng_1$1.rng();
        if (node == null) {
            // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
            node = _nodeId = [
                seedBytes[0] | 0x01,
                seedBytes[1],
                seedBytes[2],
                seedBytes[3],
                seedBytes[4],
                seedBytes[5],
            ];
        }
        if (clockseq == null) {
            // Per 4.2.2, randomize (14 bit) clockseq
            clockseq = _clockseq = ((seedBytes[6] << 8) | seedBytes[7]) & 0x3fff;
        }
    }
    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    let msecs = options && options.msecs ? options.msecs : Date.now();
    // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    let nsecs = options && options.nsecs ? options.nsecs : _lastNSecs + 1;
    // Time since last uuid creation (in msecs)
    const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;
    // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options && !options.clockseq) {
        clockseq = (clockseq + 1) & 0x3fff;
    }
    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options && !options.nsecs) {
        nsecs = 0;
    }
    // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    }
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;
    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000;
    // `time_low`
    const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = (tl >>> 24) & 0xff;
    b[i++] = (tl >>> 16) & 0xff;
    b[i++] = (tl >>> 8) & 0xff;
    b[i++] = tl & 0xff;
    // `time_mid`
    const tmh = ((msecs / 0x100000000) * 10000) & 0xfffffff;
    b[i++] = (tmh >>> 8) & 0xff;
    b[i++] = tmh & 0xff;
    // `time_high_and_version`
    b[i++] = ((tmh >>> 24) & 0xf) | 0x10; // include version
    b[i++] = (tmh >>> 16) & 0xff;
    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = (clockseq >>> 8) | 0x80;
    // `clock_seq_low`
    b[i++] = clockseq & 0xff;
    // `node`
    for (let n = 0; n < 6; ++n) {
        b[i + n] = node[n];
    }
    return buf || stringify_1$1.stringify(b);
};
v1$1.v1 = v1;

var v4$1 = {};

Object.defineProperty(v4$1, "__esModule", { value: true });
v4$1.v4 = void 0;
/* eslint-disable no-bitwise */
const unparse_1$1 = unparse$1;
const rng_1 = rng$1;
// **`v4()` - Generate random UUID**
// See https://github.com/broofa/node-uuid for API details
const v4 = (options, buf, offset) => {
    // Deprecated - 'format' argument, as supported in v1.2
    let i = (buf && offset) || 0;
    // buf = new Array<number>(16);
    let rnds = rng_1.rng();
    if (options && !(options instanceof String)) {
        if (options.random) {
            rnds = options.random;
        }
        if (options.rng) {
            rnds = options.rng();
        }
    }
    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = (rnds[6] & 0x0f) | 0x40;
    rnds[8] = (rnds[8] & 0x3f) | 0x80;
    // Copy bytes to buffer, if provided
    if (buf) {
        for (var ii = 0; ii < 16; ii++) {
            buf[i + ii] = rnds[ii];
        }
    }
    return buf || unparse_1$1.unparse(rnds);
};
v4$1.v4 = v4;

var v5 = {};

var v35$1 = {};

Object.defineProperty(v35$1, "__esModule", { value: true });
v35$1.v35 = void 0;
/* eslint-disable no-bitwise */
const stringify_1 = stringify$1;
const parse_1$1 = parse$1;
const utils_1$1 = utils;
const v35 = (name, version, hashfunc) => {
    const generateUUID = (value, namespace, buf, offset = 0) => {
        if (typeof value === 'string') {
            value = utils_1$1.stringToBytes(value);
        }
        if (typeof namespace === 'string') {
            namespace = parse_1$1.parse(namespace);
        }
        if (namespace && namespace.length !== 16) {
            throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
        }
        // Compute hash of namespace and value, Per 4.3
        // Future: Use spread syntax when supported on all platforms, e.g.
        // `bytes = hashfunc([...namespace, ... value])`
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = utils_1$1.stringToBytes(hashfunc(utils_1$1.bytesToString(bytes)));
        bytes[6] = (bytes[6] & 0x0f) | version;
        bytes[8] = (bytes[8] & 0x3f) | 0x80;
        if (buf) {
            for (let i = 0; i < 16; ++i) {
                buf[offset + i] = bytes[i];
            }
        }
        return buf ? buf : stringify_1.stringify(bytes);
    };
    return generateUUID;
};
v35$1.v35 = v35;

var sha1 = {};

(function (exports) {
	/* eslint-disable no-bitwise */
	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS 180-1
	 * Version 2.2 Copyright Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.any_hmac_sha1 = exports.b64_hmac_sha1 = exports.hex_hmac_sha1 = exports.any_sha1 = exports.b64_sha1 = exports.hex_sha1 = void 0;
	/*
	 * Configurable variables. You may need to tweak these to be compatible with
	 * the server-side, but the defaults work in most cases.
	 */
	/* hex output format. 0 - lowercase; 1 - uppercase */
	let hexcase = 0;
	/* base-64 pad character. "=" for strict RFC compliance */
	let b64pad = '';
	/*
	 * These are the functions you'll usually want to call
	 * They take string arguments and return either hex or base-64 encoded strings
	 */
	const hex_sha1 = (s) => rstr2hex(rstr_sha1(str2rstr_utf8(s)));
	exports.hex_sha1 = hex_sha1;
	exports.default = exports.hex_sha1;
	const b64_sha1 = (s) => rstr2b64(rstr_sha1(str2rstr_utf8(s)));
	exports.b64_sha1 = b64_sha1;
	const any_sha1 = (s, e) => rstr2any(rstr_sha1(str2rstr_utf8(s)), e);
	exports.any_sha1 = any_sha1;
	const hex_hmac_sha1 = (k, d) => rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)));
	exports.hex_hmac_sha1 = hex_hmac_sha1;
	const b64_hmac_sha1 = (k, d) => rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)));
	exports.b64_hmac_sha1 = b64_hmac_sha1;
	const any_hmac_sha1 = (k, d, e) => rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e);
	exports.any_hmac_sha1 = any_hmac_sha1;
	/*
	 * Calculate the SHA1 of a raw string
	 */
	const rstr_sha1 = (s) => binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));
	/*
	 * Calculate the HMAC-SHA1 of a key and some data (raw strings)
	 */
	const rstr_hmac_sha1 = (key, data) => {
	    let bkey = rstr2binb(key);
	    if (bkey.length > 16) {
	        bkey = binb_sha1(bkey, key.length * 8);
	    }
	    let ipad = Array(16);
	    let opad = Array(16);
	    for (var i = 0; i < 16; i++) {
	        ipad[i] = bkey[i] ^ 0x36363636;
	        opad[i] = bkey[i] ^ 0x5c5c5c5c;
	    }
	    var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);
	    return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));
	};
	/*
	 * Convert a raw string to a hex string
	 */
	const rstr2hex = (input) => {
	    try {
	        hexcase;
	    }
	    catch (e) {
	        hexcase = 0;
	    }
	    var hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef';
	    var output = '';
	    var x;
	    for (var i = 0; i < input.length; i++) {
	        x = input.charCodeAt(i);
	        output += hex_tab.charAt((x >>> 4) & 0x0f) + hex_tab.charAt(x & 0x0f);
	    }
	    return output;
	};
	/*
	 * Convert a raw string to a base-64 string
	 */
	const rstr2b64 = (input) => {
	    try {
	        b64pad;
	    }
	    catch (e) {
	        b64pad = '';
	    }
	    var tab = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	    var output = '';
	    var len = input.length;
	    for (var i = 0; i < len; i += 3) {
	        var triplet = (input.charCodeAt(i) << 16) |
	            (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) |
	            (i + 2 < len ? input.charCodeAt(i + 2) : 0);
	        for (var j = 0; j < 4; j++) {
	            if (i * 8 + j * 6 > input.length * 8) {
	                output += b64pad;
	            }
	            else {
	                output += tab.charAt((triplet >>> (6 * (3 - j))) & 0x3f);
	            }
	        }
	    }
	    return output;
	};
	/*
	 * Convert a raw string to an arbitrary string encoding
	 */
	const rstr2any = (input, encoding) => {
	    var divisor = encoding.length;
	    var remainders = [];
	    var i, q, x, quotient;
	    /* Convert to an array of 16-bit big-endian values, forming the dividend */
	    var dividend = Array(Math.ceil(input.length / 2));
	    for (i = 0; i < dividend.length; i++) {
	        dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);
	    }
	    /*
	     * Repeatedly perform a long division. The binary array forms the dividend,
	     * the length of the encoding is the divisor. Once computed, the quotient
	     * forms the dividend for the next step. We stop when the dividend is zero.
	     * All remainders are stored for later use.
	     */
	    while (dividend.length > 0) {
	        quotient = [];
	        x = 0;
	        for (i = 0; i < dividend.length; i++) {
	            x = (x << 16) + dividend[i];
	            q = Math.floor(x / divisor);
	            x -= q * divisor;
	            if (quotient.length > 0 || q > 0) {
	                quotient[quotient.length] = q;
	            }
	        }
	        remainders[remainders.length] = x;
	        dividend = quotient;
	    }
	    /* Convert the remainders to the output string */
	    var output = '';
	    for (i = remainders.length - 1; i >= 0; i--) {
	        output += encoding.charAt(remainders[i]);
	    }
	    /* Append leading zero equivalents */
	    var full_length = Math.ceil((input.length * 8) / (Math.log(encoding.length) / Math.log(2)));
	    for (i = output.length; i < full_length; i++) {
	        output = encoding[0] + output;
	    }
	    return output;
	};
	/*
	 * Encode a string as utf-8.
	 * For efficiency, this assumes the input is valid utf-16.
	 */
	const str2rstr_utf8 = (input) => {
	    var output = '';
	    var i = -1;
	    var x, y;
	    while (++i < input.length) {
	        /* Decode utf-16 surrogate pairs */
	        x = input.charCodeAt(i);
	        y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;
	        if (x >= 0xd800 && x <= 0xdbff && y >= 0xdc00 && y <= 0xdfff) {
	            x = 0x10000 + ((x & 0x03ff) << 10) + (y & 0x03ff);
	            i++;
	        }
	        /* Encode output as utf-8 */
	        if (x <= 0x7f) {
	            output += String.fromCharCode(x);
	        }
	        else if (x <= 0x7ff) {
	            output += String.fromCharCode(0xc0 | ((x >>> 6) & 0x1f), 0x80 | (x & 0x3f));
	        }
	        else if (x <= 0xffff) {
	            output += String.fromCharCode(0xe0 | ((x >>> 12) & 0x0f), 0x80 | ((x >>> 6) & 0x3f), 0x80 | (x & 0x3f));
	        }
	        else if (x <= 0x1fffff) {
	            output += String.fromCharCode(0xf0 | ((x >>> 18) & 0x07), 0x80 | ((x >>> 12) & 0x3f), 0x80 | ((x >>> 6) & 0x3f), 0x80 | (x & 0x3f));
	        }
	    }
	    return output;
	};
	/*
	 * Convert a raw string to an array of big-endian words
	 * Characters >255 have their high-byte silently ignored.
	 */
	const rstr2binb = (input) => {
	    var output = Array(input.length >> 2);
	    for (var i = 0; i < output.length; i++) {
	        output[i] = 0;
	    }
	    for (var i = 0; i < input.length * 8; i += 8) {
	        output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << (24 - (i % 32));
	    }
	    return output;
	};
	/*
	 * Convert an array of big-endian words to a string
	 */
	const binb2rstr = (input) => {
	    var output = '';
	    for (var i = 0; i < input.length * 32; i += 8) {
	        output += String.fromCharCode((input[i >> 5] >>> (24 - (i % 32))) & 0xff);
	    }
	    return output;
	};
	/*
	 * Calculate the SHA-1 of an array of big-endian words, and a bit length
	 */
	const binb_sha1 = (x, len) => {
	    /* append padding */
	    x[len >> 5] |= 0x80 << (24 - (len % 32));
	    x[(((len + 64) >> 9) << 4) + 15] = len;
	    var w = Array(80);
	    var a = 1732584193;
	    var b = -271733879;
	    var c = -1732584194;
	    var d = 271733878;
	    var e = -1009589776;
	    for (var i = 0; i < x.length; i += 16) {
	        var olda = a;
	        var oldb = b;
	        var oldc = c;
	        var oldd = d;
	        var olde = e;
	        for (var j = 0; j < 80; j++) {
	            if (j < 16) {
	                w[j] = x[i + j];
	            }
	            else {
	                w[j] = bit_rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
	            }
	            let t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));
	            e = d;
	            d = c;
	            c = bit_rol(b, 30);
	            b = a;
	            a = t;
	        }
	        a = safe_add(a, olda);
	        b = safe_add(b, oldb);
	        c = safe_add(c, oldc);
	        d = safe_add(d, oldd);
	        e = safe_add(e, olde);
	    }
	    return [a, b, c, d, e];
	};
	/*
	 * Perform the appropriate triplet combination function for the current
	 * iteration
	 */
	const sha1_ft = (t, b, c, d) => {
	    if (t < 20) {
	        return (b & c) | (~b & d);
	    }
	    if (t < 40) {
	        return b ^ c ^ d;
	    }
	    if (t < 60) {
	        return (b & c) | (b & d) | (c & d);
	    }
	    return b ^ c ^ d;
	};
	/*
	 * Determine the appropriate additive constant for the current iteration
	 */
	const sha1_kt = (t) => t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;
	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	const safe_add = (x, y) => {
	    var lsw = (x & 0xffff) + (y & 0xffff);
	    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	    return (msw << 16) | (lsw & 0xffff);
	};
	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	const bit_rol = (num, cnt) => {
	    return (num << cnt) | (num >>> (32 - cnt));
	};
	
} (sha1));

var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(v5, "__esModule", { value: true });
v5.v5 = void 0;
const v35_1 = v35$1;
const sha1_1 = __importDefault(sha1);
v5.v5 = v35_1.v35('v5', 0x50, sha1_1.default);

Object.defineProperty(dist, "__esModule", { value: true });
const parse_1 = parse$1;
const unparse_1 = unparse$1;
const validate_1 = validate$1;
const version_1 = version$1;
const v1_1 = v1$1;
const v4_1 = v4$1;
const v5_1 = v5;
const utils_1 = utils;
var _default = dist.default = {
    parse: parse_1.parse,
    unparse: unparse_1.unparse,
    validate: validate_1.validate,
    version: version_1.version,
    v1: v1_1.v1,
    v4: v4_1.v4,
    v5: v5_1.v5,
    NIL: utils_1.NIL, DNS: utils_1.DNS, URL: utils_1.URL, OID: utils_1.OID, X500: utils_1.X500
};

/**
 * Allows users to compose messages using text and emojis
 * and automatically publish them on PubNub channels upon sending.
 */
var useMessageInputCore = function (props) {
    var pubnub = pubnubReact.usePubNub();
    var draftMessage = props.draftMessage, senderInfo = props.senderInfo, onSend = props.onSend, onBeforeSend = props.onBeforeSend, typingIndicator = props.typingIndicator;
    var _a = React.useState(draftMessage || ""), text = _a[0], setText = _a[1];
    var _b = React.useState(null), file = _b[0], setFile = _b[1];
    var _c = React.useState(false), typingIndicatorSent = _c[0], setTypingIndicatorSent = _c[1];
    var _d = React.useState(false), loader = _d[0], setLoader = _d[1];
    var users = useAtom(UsersMetaAtom)[0];
    var theme = useAtom(ThemeAtom)[0];
    var channel = useAtom(CurrentChannelAtom)[0];
    var onErrorObj = useAtom(ErrorFunctionAtom)[0];
    var onError = onErrorObj.function;
    var typingIndicatorTimeout = useAtom(TypingIndicatorTimeoutAtom)[0];
    /*
    /* Helper functions
    */
    var isValidInputText = function () {
        return !!text.trim().length;
    };
    /*
    /* Commands
    */
    var sendMessage = function () { return __awaiter(void 0, void 0, void 0, function () {
        var message, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (loader)
                        return [2 /*return*/];
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 6, 7, 8]);
                    if (!file && !isValidInputText())
                        return [2 /*return*/];
                    message = __assign(__assign({ id: _default.v4(), text: file ? "" : text, type: file ? "" : "default" }, (senderInfo && { sender: users.find(function (u) { return u.id === pubnub.getUUID(); }) })), { createdAt: new Date().toISOString() });
                    setLoader(true);
                    if (!file) return [3 /*break*/, 3];
                    return [4 /*yield*/, pubnub.sendFile({ channel: channel, file: file, message: message })];
                case 2:
                    _a.sent();
                    onSend && onSend(file);
                    return [3 /*break*/, 5];
                case 3:
                    if (!text) return [3 /*break*/, 5];
                    if (onBeforeSend)
                        message = onBeforeSend(message) || message;
                    return [4 /*yield*/, pubnub.publish({ channel: channel, message: message })];
                case 4:
                    _a.sent();
                    onSend && onSend(message);
                    _a.label = 5;
                case 5:
                    if (typingIndicator)
                        stopTypingIndicator();
                    clearInput();
                    return [3 /*break*/, 8];
                case 6:
                    e_1 = _a.sent();
                    onError(e_1);
                    return [3 /*break*/, 8];
                case 7:
                    setLoader(false);
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    }); };
    var startTypingIndicator = function () { return __awaiter(void 0, void 0, void 0, function () {
        var message;
        return __generator(this, function (_a) {
            if (typingIndicatorSent)
                return [2 /*return*/];
            try {
                setTypingIndicatorSent(true);
                message = { message: { type: "typing_on" }, channel: channel };
                pubnub.signal(message);
            }
            catch (e) {
                onError(e);
            }
            return [2 /*return*/];
        });
    }); };
    var stopTypingIndicator = function () { return __awaiter(void 0, void 0, void 0, function () {
        var message;
        return __generator(this, function (_a) {
            if (!typingIndicatorSent)
                return [2 /*return*/];
            try {
                setTypingIndicatorSent(false);
                message = { message: { type: "typing_off" }, channel: channel };
                pubnub.signal(message);
            }
            catch (e) {
                onError(e);
            }
            return [2 /*return*/];
        });
    }); };
    var clearInput = function () {
        setFile(null);
        setText("");
    };
    /*
    /* Lifecycle
    */
    React.useEffect(function () {
        var timer = null;
        if (typingIndicatorSent) {
            timer = setTimeout(function () {
                setTypingIndicatorSent(false);
            }, (typingIndicatorTimeout - 1) * 1000);
        }
        return function () { return clearTimeout(timer); };
    }, [typingIndicatorSent, typingIndicatorTimeout]);
    return {
        clearInput: clearInput,
        file: file,
        setFile: setFile,
        isValidInputText: isValidInputText,
        loader: loader,
        onError: onError,
        sendMessage: sendMessage,
        setText: setText,
        text: text,
        theme: theme,
        startTypingIndicator: startTypingIndicator,
        stopTypingIndicator: stopTypingIndicator,
    };
};

/**
 * Fetches historical messages using the scrolling pagination pattern and subscribes to the current
 * channel to stay up to date with new messages.
 *
 * It also displays data in an interactive list, including
 * user names, avatars, the time when a message was sent, and attachments (links, images) and allows to react to
 * messages with emojis and to show those reactions immediately.
 */
var useMessageListCore = function (props) {
    var pubnub = pubnubReact.usePubNub();
    var channel = useAtom(CurrentChannelAtom)[0];
    var prevChannel = usePrevious(channel);
    var users = useAtom(UsersMetaAtom)[0];
    var requestMissingUser = useSetAtom(RequestMissingUserAtom);
    var theme = useAtom(ThemeAtom)[0];
    var retryObj = useAtom(RetryFunctionAtom)[0];
    var onErrorObj = useAtom(ErrorFunctionAtom)[0];
    var _a = useAtom(CurrentChannelMessagesAtom), messages = _a[0], setMessages = _a[1];
    var prevMessages = usePrevious(messages);
    var _b = useAtom(CurrentChannelPaginationAtom), paginationEnd = _b[0], setPaginationEnd = _b[1];
    var retry = retryObj.function;
    var onError = onErrorObj.function;
    var _c = React.useState(true), scrolledBottom = _c[0], setScrolledBottom = _c[1];
    var _d = React.useState(0), unreadMessages = _d[0], setUnreadMessages = _d[1];
    var _e = React.useState(false), fetchingMessages = _e[0], setFetchingMessages = _e[1];
    var _f = React.useState(null), reactingToMessage = _f[0], setReactingToMessage = _f[1];
    var _g = React.useState(false), emojiPickerShown = _g[0], setEmojiPickerShown = _g[1];
    // https://pubnub.atlassian.net/browse/UI-1843
    var _h = React.useState({}), initMessagesLoaded = _h[0], setInitMessagesLoaded = _h[1];
    /*
    /* Helper functions
    */
    var getTime = function (timestamp) {
        var ts = String(timestamp);
        var date = new Date(parseInt(ts) / 10000);
        return date.toLocaleTimeString([], { timeStyle: "short" });
        /* toLocaleTimeString internally uses Intl API if available
         * Otherwise the options passed to it will be ignored (e.g. on Android devices) */
    };
    var getUser = function (uuid) {
        return users.find(function (u) { return u.id === uuid; });
    };
    var isOwnMessage = function (uuid) {
        return pubnub.getUUID() === uuid;
    };
    /*
    /* Commands
    */
    var fetchFileUrl = React.useCallback(function (envelope) {
        if (!isFilePayload(envelope.message))
            return envelope;
        try {
            var url = pubnub.getFileUrl({
                channel: envelope.channel,
                id: envelope.message.file.id,
                name: envelope.message.file.name,
            });
            envelope.message.file.url = url;
        }
        catch (e) {
            onError(e);
        }
        finally {
            return envelope;
        }
    }, [pubnub, onError]);
    var fetchHistory = React.useCallback(function () { return __awaiter(void 0, void 0, void 0, function () {
        var options_1, response, newMessages, allMessages, e_1;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!props.fetchMessages || paginationEnd)
                        return [2 /*return*/];
                    setFetchingMessages(true);
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, 4, 5]);
                    options_1 = {
                        channels: [channel],
                        count: props.fetchMessages,
                        start: ((_a = messages === null || messages === void 0 ? void 0 : messages[0]) === null || _a === void 0 ? void 0 : _a.timetoken) || undefined,
                        includeMessageActions: true,
                        includeMeta: true,
                    };
                    return [4 /*yield*/, retry(function () {
                            return pubnub.fetchMessages(options_1);
                        })];
                case 2:
                    response = (_b.sent());
                    newMessages = ((response === null || response === void 0 ? void 0 : response.channels[channel]) || []).map(function (m) {
                        var _a;
                        if (!users.find(function (u) { return u.id === m.uuid; }))
                            requestMissingUser(m.uuid);
                        var reactions = (_a = m.actions) === null || _a === void 0 ? void 0 : _a.reaction;
                        if (reactions) {
                            Object.values(reactions)
                                .flat()
                                .forEach(function (r) {
                                if (!users.find(function (u) { return u.id === r.uuid; }))
                                    requestMissingUser(r.uuid);
                            });
                        }
                        return m.messageType === 4 ? fetchFileUrl(m) : m;
                    });
                    allMessages = __spreadArray(__spreadArray([], messages, true), newMessages, true).sort(function (a, b) { return a.timetoken - b.timetoken; });
                    setMessages(allMessages);
                    setPaginationEnd(!response.more && (!allMessages.length || newMessages.length !== props.fetchMessages));
                    return [3 /*break*/, 5];
                case 3:
                    e_1 = _b.sent();
                    onError(e_1);
                    return [3 /*break*/, 5];
                case 4:
                    setFetchingMessages(false);
                    return [7 /*endfinally*/];
                case 5: return [2 /*return*/];
            }
        });
    }); }, [
        channel,
        fetchFileUrl,
        messages,
        onError,
        paginationEnd,
        props.fetchMessages,
        pubnub,
        requestMissingUser,
        retry,
        setMessages,
        setPaginationEnd,
        users,
    ]);
    var addReaction = function (reaction, messageTimetoken) { return __awaiter(void 0, void 0, void 0, function () {
        var e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, pubnub.addMessageAction({
                            channel: channel,
                            messageTimetoken: String(messageTimetoken),
                            action: {
                                type: "reaction",
                                value: reaction,
                            },
                        })];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    e_2 = _a.sent();
                    onError(e_2);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); };
    var removeReaction = function (reaction, messageTimetoken, actionTimetoken) { return __awaiter(void 0, void 0, void 0, function () {
        var e_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, pubnub.removeMessageAction({ channel: channel, messageTimetoken: messageTimetoken, actionTimetoken: actionTimetoken })];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    e_3 = _a.sent();
                    onError(e_3);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); };
    React.useEffect(function () {
        if (!pubnub || !channel)
            return;
        if (channel === prevChannel)
            return;
        if (!initMessagesLoaded[channel]) {
            fetchHistory().then(function () {
                setInitMessagesLoaded(function (curr) {
                    var _a;
                    return (__assign(__assign({}, curr), (_a = {}, _a[channel] = true, _a)));
                });
            });
        }
    }, [channel, fetchHistory, initMessagesLoaded, messages.length, prevChannel, pubnub]);
    React.useEffect(function () {
        var _a, _b;
        if (!(messages === null || messages === void 0 ? void 0 : messages.length) || scrolledBottom)
            return;
        if (messages.length - prevMessages.length !== 1)
            return;
        if (Number((_a = messages.slice(-1)[0]) === null || _a === void 0 ? void 0 : _a.timetoken) > Number((_b = prevMessages.slice(-1)[0]) === null || _b === void 0 ? void 0 : _b.timetoken))
            setUnreadMessages(function (unread) { return unread + 1; });
    }, [messages, prevMessages, scrolledBottom]);
    return {
        addReaction: addReaction,
        channel: channel,
        emojiPickerShown: emojiPickerShown,
        fetchHistory: fetchHistory,
        fetchingMessages: fetchingMessages,
        getTime: getTime,
        getUser: getUser,
        isOwnMessage: isOwnMessage,
        messages: messages,
        onError: onError,
        paginationEnd: paginationEnd,
        prevChannel: prevChannel,
        prevMessages: prevMessages,
        pubnub: pubnub,
        reactingToMessage: reactingToMessage,
        removeReaction: removeReaction,
        scrolledBottom: scrolledBottom,
        setEmojiPickerShown: setEmojiPickerShown,
        setReactingToMessage: setReactingToMessage,
        setScrolledBottom: setScrolledBottom,
        setUnreadMessages: setUnreadMessages,
        theme: theme,
        unreadMessages: unreadMessages,
        users: users,
        initMessagesLoaded: initMessagesLoaded,
    };
};

/** Used to stand-in for `undefined` hash values. */

var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd$1(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

var _setCacheAdd = setCacheAdd$1;

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */

function setCacheHas$1(value) {
  return this.__data__.has(value);
}

var _setCacheHas = setCacheHas$1;

var MapCache = _MapCache,
    setCacheAdd = _setCacheAdd,
    setCacheHas = _setCacheHas;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache$1(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache$1.prototype.add = SetCache$1.prototype.push = setCacheAdd;
SetCache$1.prototype.has = setCacheHas;

var _SetCache = SetCache$1;

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */

function arraySome$1(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

var _arraySome = arraySome$1;

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function cacheHas$1(cache, key) {
  return cache.has(key);
}

var _cacheHas = cacheHas$1;

var SetCache = _SetCache,
    arraySome = _arraySome,
    cacheHas = _cacheHas;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$3 = 1,
    COMPARE_UNORDERED_FLAG$1 = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG$1) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

var _equalArrays = equalArrays$2;

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */

function mapToArray$1(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

var _mapToArray = mapToArray$1;

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */

function setToArray$1(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

var _setToArray = setToArray$1;

var Symbol$1 = _Symbol,
    Uint8Array$1 = _Uint8Array,
    eq = eq_1,
    equalArrays$1 = _equalArrays,
    mapToArray = _mapToArray,
    setToArray = _setToArray;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$2 = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

var _equalByTag = equalByTag$1;

var getAllKeys = _getAllKeys;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$1 = 1;

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty$1.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

var _equalObjects = equalObjects$1;

var Stack = _Stack,
    equalArrays = _equalArrays,
    equalByTag = _equalByTag,
    equalObjects = _equalObjects,
    getTag = _getTag,
    isArray = isArray_1,
    isBuffer = isBuffer$4.exports,
    isTypedArray = isTypedArray_1;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

var _baseIsEqualDeep = baseIsEqualDeep$1;

var baseIsEqualDeep = _baseIsEqualDeep,
    isObjectLike = isObjectLike_1;

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual$1(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$1, stack);
}

var _baseIsEqual = baseIsEqual$1;

var baseIsEqual = _baseIsEqual;

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

var isEqual_1 = isEqual;

/** Subscribes to events generated by MessageInput to display information about users that are
 * currently typing messages.
 *
 * It can be displayed as a text denoting the user's name, or in a form similar to
 * a message that can be renderer inside MessageList.
 */
var useTypingIndicatorCore = function (props) {
    var pubnub = pubnubReact.usePubNub();
    var theme = useAtom(ThemeAtom)[0];
    var users = useAtom(UsersMetaAtom)[0];
    var typingIndicators = useAtom(CurrentChannelTypingIndicatorAtom)[0];
    var typingIndicatorTimeout = useAtom(TypingIndicatorTimeoutAtom)[0];
    var _a = React.useState([]), activeUUIDs = _a[0], setActiveUUIDs = _a[1];
    var typingIndicatorsRef = React.useRef(typingIndicators);
    if (!isEqual_1(typingIndicatorsRef.current, typingIndicators)) {
        typingIndicatorsRef.current = typingIndicators;
    }
    var calculateActiveUUIDs = React.useCallback(function () {
        var currentActiveUUIDs = Object.keys(typingIndicators).filter(function (id) { return Date.now() - parseInt(typingIndicators[id]) / 10000 < typingIndicatorTimeout * 1000; });
        var currentActiveUUIDsWoCurrent = currentActiveUUIDs.filter(function (id) { return id !== pubnub.getUUID(); });
        setActiveUUIDs(currentActiveUUIDsWoCurrent);
    }, [typingIndicatorsRef.current]);
    var getIndicationString = function () {
        var indicateStr = "";
        if (activeUUIDs.length > 1)
            indicateStr = "Multiple users are typing...";
        if (activeUUIDs.length == 1) {
            var user = users.find(function (u) { return u.id === activeUUIDs[0]; });
            indicateStr = "".concat((user === null || user === void 0 ? void 0 : user.name) || "Unknown User", " is typing...");
        }
        return indicateStr;
    };
    React.useEffect(function () {
        calculateActiveUUIDs();
        var interval = setInterval(calculateActiveUUIDs, 1000);
        return function () { return clearInterval(interval); };
    }, [calculateActiveUUIDs]);
    return {
        activeUUIDs: activeUUIDs,
        getIndicationString: getIndicationString,
        theme: theme,
        users: users,
    };
};

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z$5 = "/* ************************\n** Variables\n** ********************* */\n:root {\n  --channel-list__background: var(--chat--light__background--2);\n  --channel__alignItems: center;\n  --channel__padding: 8px 16px;\n  --channel__justifyContent: flex-start;\n  --channel__background: transparent;\n  --channel--hover__background: var(--chat--light__hover--2);\n  --channel--active__background: var(--chat--light__background--1);\n  --channel__thumb__display: block;\n  --channel__thumb__margin: 0 18px 0 0;\n  --channel__thumb__size: 36px;\n  --channel__thumb__borderRadius: 36px;\n  --channel__name__color: var(--chat--light__color--1);\n  --channel--hover__name__color: var(--chat--light__color--1);\n  --channel--active__name__color: var(--chat--light__color--1);\n  --channel__name__fontSize: 13px;\n  --channel__name__fontWeight: 400;\n  --channel__name__margin: 0;\n  --channel__name__overflow: hidden;\n  --channel__name__padding: 0;\n  --channel__name__textOverflow: ellipsis;\n  --channel__name__whiteSpace: nowrap;\n  --channel__description__color: var(--chat--light__color--2);\n  --channel--hover__description__color: var(--chat--light__color--2);\n  --channel--active__description__color: var(--chat--light__color--2);\n  --channel__description__display: block;\n  --channel__description__fontSize: 11px;\n  --channel__description__fontWeight: 400;\n  --channel__description__margin: 0;\n  --channel__description__overflow: hidden;\n  --channel__description__padding: 7px 0 0;\n  --channel__description__textOverflow: ellipsis;\n  --channel__description__whiteSpace: nowrap;\n  --channel__actions--hover__background: transparent;\n  --channel__actions__background: transparent;\n  --channel__actions__borderRadius: 5px;\n  --channel__actions__color: var(--chat--light__color--2);\n  --channel__actions--hover__color: var(--chat--light__hover--1);\n  --channel__actions__fontSize: 18px;\n  --channel__actions__margin: 0 0 0 4px;\n  --channel__actions__padding: 3px 5px;\n  --channel__actions__visibility: hidden;\n}\n\n/* ************************\n** Styles\n** ********************* */\n.pn-channel-list {\n  height: 100%;\n  overflow-y: auto;\n  width: 100%;\n  background: var(--channel-list__background);\n}\n\n.pn-channel {\n  align-items: var(--channel__alignItems);\n  background: var(--channel__background);\n  cursor: pointer;\n  display: flex;\n  justify-content: var(--channel__justifyContent);\n  padding: var(--channel__padding);\n  position: relative;\n}\n.pn-channel:hover {\n  background: var(--channel--hover__background);\n}\n.pn-channel:hover .pn-channel__leave {\n  display: inline;\n}\n.pn-channel:hover .pn-channel__name {\n  color: var(--channel--hover__name__color);\n}\n.pn-channel:hover .pn-channel__description {\n  color: var(--channel--hover__description__color);\n}\n.pn-channel:hover .pn-channel__actions {\n  visibility: visible;\n}\n.pn-channel--active {\n  background: var(--channel--active__background);\n}\n.pn-channel--active .pn-channel__name {\n  color: var(--channel--active__name__color);\n}\n.pn-channel--active .pn-channel__description {\n  color: var(--channel--active__description__color);\n}\n.pn-channel__thumb {\n  border-radius: var(--channel__thumb__borderRadius);\n  display: var(--channel__thumb__display);\n  flex: none;\n  margin: var(--channel__thumb__margin);\n  width: var(--channel__thumb__size);\n}\n.pn-channel__title {\n  flex: 1;\n  min-width: 0;\n}\n.pn-channel__name {\n  color: var(--channel__name__color);\n  font-size: var(--channel__name__fontSize);\n  font-weight: var(--channel__name__fontWeight);\n  margin: var(--channel__name__margin);\n  overflow: var(--channel__name__overflow);\n  padding: var(--channel__name__padding);\n  text-align: left;\n  text-overflow: var(--channel__name__textOverflow);\n  white-space: var(--channel__name__whiteSpace);\n}\n.pn-channel__description {\n  color: var(--channel__description__color);\n  display: var(--channel__description__display);\n  font-size: var(--channel__description__fontSize);\n  font-weight: var(--channel__description__fontWeight);\n  margin: var(--channel__description__margin);\n  overflow: var(--channel__description__overflow);\n  padding: var(--channel__description__padding);\n  text-align: left;\n  text-overflow: var(--channel__description__textOverflow);\n  white-space: var(--channel__description__whiteSpace);\n}\n.pn-channel__actions {\n  color: var(--channel__actions__color);\n  cursor: pointer;\n  display: flex;\n  visibility: var(--channel__actions__visibility);\n  font-size: var(--channel__actions__fontSize);\n}\n.pn-channel__actions > * {\n  background: var(--channel__actions__background);\n  border-radius: var(--channel__actions__borderRadius);\n  display: flex;\n  margin: var(--channel__actions__margin);\n  padding: var(--channel__actions__padding);\n}\n.pn-channel__actions > *:hover {\n  background: var(--channel__actions--hover__background);\n  color: var(--channel__actions--hover__color);\n}\n.pn-channel__leave {\n  color: var(--channel__leave__color);\n  display: none;\n  height: var(--channel__leave__size);\n  position: absolute;\n  right: var(--channel__leave__right);\n  top: var(--channel__leave__top);\n  width: var(--channel__leave__size);\n}\n\n/* ************************\n** Themes\n** ********************* */\n.pn-channel-list--dark,\n.pn-channel-list--event-dark,\n.pn-channel-list--support-dark {\n  --channel-list__background: var(--chat--dark__background--2);\n  --channel--hover__background: var(--chat--dark__hover--2);\n  --channel--active__background: var(--chat--dark__background--1);\n  --channel__name__color: var(--chat--dark__color--1);\n  --channel--hover__name__color: var(--chat--dark__color--1);\n  --channel--active__name__color: var(--chat--dark__color--1);\n  --channel__description__color: var(--chat--dark__color--2);\n  --channel--hover__description__color: var(--chat--dark__color--2);\n  --channel--active__description__color: var(--chat--dark__color--2);\n  --channel__actions__color: var(--chat--dark__color--2);\n  --channel__actions--hover__color: var(--chat--dark__hover--1);\n}";
styleInject(css_248z$5);

/**
 * Renders an interactive list of channels.
 *
 * It can represent all channels of the application, only
 * channels joined by the current user, all channels available to be joined, or whatever else is
 * passed into it. A common pattern in chat applications is to render two instances of the
 * component - one visible all the time to show joined channels, and another one hidden inside a
 * modal with channels available to join. Make sure to handle the onChannelSwitched event to switch
 * the current channel passed to the Chat provider.
 */
var ChannelList = function (props) {
    var _a = useChannelListCore(props), channelFromString = _a.channelFromString, channelSorter = _a.channelSorter, isChannelActive = _a.isChannelActive, switchChannel = _a.switchChannel, theme = _a.theme;
    /*
    /* Renderers
    */
    var renderChannel = function (channel) {
        var _a, _b;
        if (props.channelRenderer)
            return props.channelRenderer(channel);
        var channelActive = isChannelActive(channel);
        var activeClass = channelActive ? "pn-channel--active" : "";
        return (React__default["default"].createElement("div", { key: channel.id, className: "pn-channel ".concat(activeClass), onClick: function () { return switchChannel(channel); } },
            ((_a = channel.custom) === null || _a === void 0 ? void 0 : _a.profileUrl) && (React__default["default"].createElement("img", { className: "pn-channel__thumb", src: (_b = channel.custom) === null || _b === void 0 ? void 0 : _b.profileUrl, alt: "Channel thumb" })),
            React__default["default"].createElement("div", { className: "pn-channel__title" },
                React__default["default"].createElement("p", { className: "pn-channel__name" }, channel.name || channel.id),
                channel.description && React__default["default"].createElement("p", { className: "pn-channel__description" }, channel.description)),
            React__default["default"].createElement("div", { className: "pn-channel__actions" }, props.extraActionsRenderer && props.extraActionsRenderer(channel))));
    };
    return (React__default["default"].createElement("div", { className: "pn-channel-list pn-channel-list--".concat(theme) },
        props.channels.map(channelFromString).sort(channelSorter).map(renderChannel),
        React__default["default"].createElement(React__default["default"].Fragment, null, props.children)));
};

var css_248z$4 = "/*\n* Global color variables for light and dark theme\n* Warning! When hexToRGB is used on a color, the variable can only be used with rgba color function\n* inside of the actual CSS. To goal of this is to introduce alpha channels on some of the colors\n*/\n:root {\n  --chat--light__background--1: #f0f3f7;\n  --chat--light__background--2: #ffffff;\n  --chat--light__background--3: #eaeef3;\n  --chat--light__background--4: #01bd4c;\n  --chat--light__background--5-rgb: 239, 58, 67;\n  --chat--light__background--6: rgba(28, 28, 28, 0.8);\n  --chat--light__color--1: #585858;\n  --chat--light__color--2: #999999;\n  --chat--light__color--2-rgb: 153, 153, 153;\n  --chat--light__color--3: #eeeeee;\n  --chat--light__border--1: #ced6e0;\n  --chat--light__border--2: #bcc6d1;\n  --chat--light__hover--1: #de2440;\n  --chat--light__hover--2: #e4e9f0;\n  --chat--light__hover--3: #e9eef4;\n  --chat--light__hover--4: #e1e8f0;\n  --chat--dark__background--1: #1c1c28;\n  --chat--dark__background--2: #2a2a39;\n  --chat--dark__background--2-rgb: 42, 42, 57;\n  --chat--dark__background--4: #01bd4c;\n  --chat--dark__background--5: 239, 58, 67;\n  --chat--dark__background--6: rgba(240, 243, 247, 0.8);\n  --chat--dark__color--1: rgba(228, 228, 235, 0.8);\n  --chat--dark__color--2: #999999;\n  --chat--dark__color--3: #111111;\n  --chat--dark__border--1: #28293d;\n  --chat--dark__hover--1: #de2440;\n  --chat--dark__hover--2: #232333;\n  --chat--dark__hover--4: #555770;\n  --chat--dark__hover--4-rgb: 85, 87, 112;\n}\n\n/*\n* Style elements common to all components\n*/\n:root {\n  --tooltip__transition: all 0.3s ease;\n  --tooltip__background: var(--chat--light__background--6);\n  --tooltip__borderRadius: 5px;\n  --tooltip__color: var(--chat--light__color--3);\n  --tooltip__margin: 8px;\n  --tooltip__padding: 5px;\n  --tooltip__minWidth: 100px;\n  --tooltip__arrow__size: 4px;\n  --tooltip__arrow__margin: 0px;\n}\n\n.pn-tooltip {\n  position: relative;\n}\n.pn-tooltip:before, .pn-tooltip:after {\n  bottom: 100%;\n  left: 50%;\n  opacity: 0;\n  position: absolute;\n  transform: translateX(-50%);\n  transition: var(--tooltip__transition);\n  visibility: hidden;\n}\n.pn-tooltip:before {\n  background: var(--tooltip__background);\n  border-radius: var(--tooltip__borderRadius);\n  color: var(--tooltip__color);\n  content: attr(data-tooltip);\n  margin-bottom: var(--tooltip__margin);\n  padding: var(--tooltip__padding);\n  text-align: center;\n  min-width: var(--tooltip__minWidth);\n  z-index: 5;\n}\n.pn-tooltip:after {\n  border: var(--tooltip__arrow__size) solid;\n  margin-bottom: var(--tooltip__arrow__margin);\n  border-color: var(--tooltip__background) transparent transparent transparent;\n  content: \"\";\n}\n.pn-tooltip:hover:before, .pn-tooltip:hover:after {\n  visibility: visible;\n  opacity: 1;\n}\n\n.pn-msg-list--dark .pn-tooltip,\n.pn-msg-list--support-dark .pn-tooltip,\n.pn-msg-list--event-dark .pn-tooltip,\n.pn-msg-input--dark .pn-tooltip,\n.pn-msg-input--event-dark .pn-tooltip,\n.pn-msg-input--support-dark .pn-tooltip,\n.pn-member-list--dark .pn-tooltip,\n.pn-member-list--event-dark .pn-tooltip,\n.pn-member-list--support-dark .pn-tooltip,\n.pn-channel-list--dark .pn-tooltip,\n.pn-channel-list--event-dark .pn-tooltip,\n.pn-channel-list--support-dark .pn-tooltip,\n.pn-typing-indicator--dark .pn-tooltip,\n.pn-typing-indicator--event-dark .pn-tooltip,\n.pn-typing-indicator--support-dark .pn-tooltip {\n  --tooltip__background: var(--chat--dark__background--6);\n  --tooltip__color: var(--chat--dark__color--3);\n}";
styleInject(css_248z$4);

var useOuterClick = function (callback) {
    var callbackRef = React.useRef();
    var innerRef = React.useRef();
    React.useEffect(function () {
        callbackRef.current = callback;
    });
    React.useEffect(function () {
        var handleClick = function (e) {
            if (innerRef.current && callbackRef.current && !innerRef.current.contains(e.target))
                callbackRef.current(e);
        };
        document.addEventListener("click", handleClick);
        return function () {
            document.removeEventListener("click", handleClick);
        };
    }, []);
    return innerRef;
};
var useIntersectionObserver = function (elementRef, observerParams) {
    var _a = React.useState(null), entry = _a[0], setEntry = _a[1];
    var updateEntry = function (_a) {
        var entry = _a[0];
        setEntry(entry);
    };
    React.useEffect(function () {
        var observer = new IntersectionObserver(updateEntry, observerParams);
        if (elementRef === null || elementRef === void 0 ? void 0 : elementRef.current)
            observer.observe(elementRef.current);
        return function () { return observer.disconnect(); };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [elementRef, JSON.stringify(observerParams)]);
    return entry;
};
var useMutationObserver = function (elementRef, observerParams) {
    var _a = React.useState(), entry = _a[0], setEntry = _a[1];
    var updateEntry = function (_a) {
        var entry = _a[0];
        setEntry(entry);
    };
    React.useEffect(function () {
        var observer = new MutationObserver(updateEntry);
        if (elementRef === null || elementRef === void 0 ? void 0 : elementRef.current)
            observer.observe(elementRef.current, observerParams);
        return function () { return observer.disconnect(); };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [elementRef, JSON.stringify(observerParams)]);
    return entry;
};
var useResizeObserver = function (elementRef) {
    var _a = React.useState(), entry = _a[0], setEntry = _a[1];
    var updateEntry = function (_a) {
        var entry = _a[0];
        setEntry(entry);
    };
    React.useEffect(function () {
        var observer = new ResizeObserver(updateEntry);
        if (elementRef === null || elementRef === void 0 ? void 0 : elementRef.current)
            observer.observe(elementRef.current);
        return function () { return observer.disconnect(); };
    }, [elementRef]);
    return entry;
};

var css_248z$3 = "/* ************************\n** Variables\n** ********************* */\n:root {\n  --member-list__background: transparent;\n  --member__alignItems: center;\n  --member__cursor: auto;\n  --member__padding: 8px 16px;\n  --member__background: transparent;\n  --member--hover__background: transparent;\n  --member__avatar__color: var(--chat--light__background--2);\n  --member__avatar__display: flex;\n  --member__avatar__fontSize: 10px;\n  --member__avatar__margin: 0 18px 0 0;\n  --member__avatar__size: 36px;\n  --member__avatar__borderRadius: 36px;\n  --member__name__color: var(--chat--light__color--1);\n  --member__name__fontSize: 13px;\n  --member__name__fontWeight: 400;\n  --member__name__margin: 0;\n  --member__name__overflow: hidden;\n  --member__name__padding: 0;\n  --member__name__textOverflow: ellipsis;\n  --member__name__whiteSpace: nowrap;\n  --member__title__color: var(--chat--light__color--2);\n  --member__title__display: block;\n  --member__title__fontSize: 11px;\n  --member__title__fontWeight: 400;\n  --member__title__margin: 0;\n  --member__title__overflow: hidden;\n  --member__title__padding: 7px 0 0;\n  --member__title__textOverflow: ellipsis;\n  --member__title__whiteSpace: nowrap;\n  --member__presence__border: 3px solid var(--chat--light__background--2);\n  --member__presence__borderRadius: 100%;\n  --member__presence__color: var(--chat--light__background--4);\n  --member__presence__left: 48px;\n  --member__presence__position: absolute;\n  --member__presence__size: 8px;\n  --member__presence__top: 34px;\n  --member__actions--hover__background: transparent;\n  --member__actions__background: transparent;\n  --member__actions__borderRadius: 5px;\n  --member__actions__color: var(--chat--light__color--2);\n  --member__actions--hover__color: var(--chat--light__hover--1);\n  --member__actions__fontSize: 18px;\n  --member__actions__margin: 0 0 0 4px;\n  --member__actions__padding: 3px 5px;\n  --member__actions__visibility: hidden;\n}\n\n/* ************************\n** Styles\n** ********************* */\n.pn-member-list {\n  height: 100%;\n  overflow-y: auto;\n  width: 100%;\n  background: var(--member-list__background);\n}\n\n.pn-member {\n  align-items: var(--member__alignItems);\n  background: var(--member__background);\n  cursor: var(--member__cursor);\n  display: flex;\n  padding: var(--member__padding);\n  position: relative;\n}\n.pn-member:hover {\n  background: var(--member--hover__background);\n}\n.pn-member:hover .pn-member__actions {\n  visibility: visible;\n}\n.pn-member__avatar {\n  align-items: center;\n  border-radius: var(--member__avatar__borderRadius);\n  color: var(--member__avatar__color);\n  display: var(--member__avatar__display);\n  font-size: var(--member__avatar__fontSize);\n  flex: none;\n  height: var(--member__avatar__size);\n  justify-content: center;\n  margin: var(--member__avatar__margin);\n  width: var(--member__avatar__size);\n}\n.pn-member__avatar img {\n  border-radius: var(--member__avatar__borderRadius);\n  height: 100%;\n  width: 100%;\n}\n.pn-member__main {\n  flex: 1;\n  min-width: 0;\n}\n.pn-member__name {\n  color: var(--member__name__color);\n  font-size: var(--member__name__fontSize);\n  font-weight: var(--member__name__fontWeight);\n  margin: var(--member__name__margin);\n  overflow: var(--member__name__overflow);\n  padding: var(--member__name__padding);\n  text-align: left;\n  text-overflow: var(--member__name__textOverflow);\n  white-space: var(--member__name__whiteSpace);\n}\n.pn-member__title {\n  color: var(--member__title__color);\n  display: var(--member__title__display);\n  font-size: var(--member__title__fontSize);\n  font-weight: var(--member__title__fontWeight);\n  margin: var(--member__title__margin);\n  overflow: var(--member__title__overflow);\n  padding: var(--member__title__padding);\n  text-align: left;\n  text-overflow: var(--member__title__textOverflow);\n  white-space: var(--member__title__whiteSpace);\n}\n.pn-member__presence {\n  background: var(--member__presence__color);\n  border: var(--member__presence__border);\n  border-radius: var(--member__presence__borderRadius);\n  height: var(--member__presence__size);\n  left: var(--member__presence__left);\n  position: var(--member__presence__position);\n  top: var(--member__presence__top);\n  width: var(--member__presence__size);\n}\n.pn-member__actions {\n  color: var(--member__actions__color);\n  cursor: pointer;\n  display: flex;\n  visibility: var(--member__actions__visibility);\n  font-size: var(--member__actions__fontSize);\n}\n.pn-member__actions > * {\n  background: var(--member__actions__background);\n  border-radius: var(--member__actions__borderRadius);\n  display: flex;\n  margin: var(--member__actions__margin);\n  padding: var(--member__actions__padding);\n}\n.pn-member__actions > *:hover {\n  background: var(--member__actions--hover__background);\n  color: var(--member__actions--hover__color);\n}\n\n/* ************************\n** Themes\n** ********************* */\n.pn-member-list--dark,\n.pn-member-list--event-dark,\n.pn-member-list--support-dark {\n  --member-list__background: var(--chat--dark__background--2);\n  --member__avatar__color: var(--chat--dark__background--2);\n  --member__name__color: var(--chat--dark__color--1);\n  --member__title__color: var(--chat--dark__color--2);\n  --member__presence__border: 3px solid var(--chat--dark__background--2);\n  --member__presence__color: var(--chat--dark__background--4);\n  --member__actions__color: var(--chat--dark__color--2);\n  --member__actions--hover__color: var(--chat--dark__hover--1);\n}";
styleInject(css_248z$3);

/**
 * Renders a list of members.
 *
 * It can represent all users of the application, only members of
 * the current channel, users currently subscribed/present on the channel, or whatever else is passed
 * into it. Custom memberRenderer can be used to modify how the users are rendered. For example
 * you can add presence indicators.
 */
var MemberList = function (props) {
    var _a = useMemberListCore(props), clickMember = _a.clickMember, isOwnMember = _a.isOwnMember, isPresentMember = _a.isPresentMember, memberFromString = _a.memberFromString, memberSorter = _a.memberSorter, theme = _a.theme;
    /*
    /* Renderers
    */
    var renderMember = function (member) {
        var _a;
        if (props.memberRenderer)
            return props.memberRenderer(member);
        var youString = isOwnMember(member.id) ? props.selfText : "";
        return (React__default["default"].createElement("div", { key: member.id, className: "pn-member", onClick: function () { return clickMember(member); } },
            React__default["default"].createElement("div", { className: "pn-member__avatar", style: { backgroundColor: getPredefinedColor(member.id) } },
                member.profileUrl ? (React__default["default"].createElement("img", { src: member.profileUrl, alt: "User avatar" })) : (getNameInitials(member.name || member.id)),
                isPresentMember(member.id) && React__default["default"].createElement("i", { className: "pn-member__presence" })),
            React__default["default"].createElement("div", { className: "pn-member__main" },
                React__default["default"].createElement("p", { className: "pn-member__name" },
                    member.name,
                    " ",
                    youString),
                React__default["default"].createElement("p", { className: "pn-member__title" }, (_a = member.custom) === null || _a === void 0 ? void 0 : _a.title)),
            React__default["default"].createElement("div", { className: "pn-member__actions" }, props.extraActionsRenderer && props.extraActionsRenderer(member))));
    };
    return (React__default["default"].createElement("div", { className: "pn-member-list pn-member-list--".concat(theme) },
        props.members.map(memberFromString).sort(memberSorter).map(renderMember),
        React__default["default"].createElement(React__default["default"].Fragment, null, props.children)));
};
MemberList.defaultProps = {
    members: [],
    presentMembers: [],
    onMemberClicked: null,
    selfText: "(You)",
};

var _path$6;
function _extends$7() { _extends$7 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$7.apply(this, arguments); }
var SvgEmoji = function SvgEmoji(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$7({
    xmlns: "http://www.w3.org/2000/svg",
    overflow: "visible",
    preserveAspectRatio: "none",
    viewBox: "0 0 24 24",
    width: 20,
    height: 20
  }, props), _path$6 || (_path$6 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm3.5-9c.83 0 1.5-.67 1.5-1.5S16.33 8 15.5 8 14 8.67 14 9.5s.67 1.5 1.5 1.5zm-7 0c.83 0 1.5-.67 1.5-1.5S9.33 8 8.5 8 7 8.67 7 9.5 7.67 11 8.5 11zm3.5 6.5c2.33 0 4.31-1.46 5.11-3.5H6.89c.8 2.04 2.78 3.5 5.11 3.5z",
    fill: "currentColor",
    vectorEffect: "non-scaling-stroke"
  })));
};

var _circle;
function _extends$6() { _extends$6 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$6.apply(this, arguments); }
var SvgSpinner = function SvgSpinner(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$6({
    xmlns: "http://www.w3.org/2000/svg",
    width: 20,
    height: 20,
    viewBox: "0 0 100 100",
    preserveAspectRatio: "xMidYMid"
  }, props), _circle || (_circle = /*#__PURE__*/React__namespace.createElement("circle", {
    cx: 50,
    cy: 50,
    fill: "none",
    stroke: "currentColor",
    strokeWidth: 15,
    r: 43,
    strokeDasharray: "117.80972450961724 41.269908169872416"
  }, /*#__PURE__*/React__namespace.createElement("animateTransform", {
    attributeName: "transform",
    type: "rotate",
    repeatCount: "indefinite",
    dur: "0.641025641025641s",
    values: "0 50 50;360 50 50",
    keyTimes: "0;1"
  }))));
};

var _path$5;
function _extends$5() { _extends$5 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$5.apply(this, arguments); }
var SvgAirplane = function SvgAirplane(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$5({
    xmlns: "http://www.w3.org/2000/svg",
    overflow: "visible",
    preserveAspectRatio: "none",
    viewBox: "0 0 24 24",
    width: 20,
    height: 20
  }, props), _path$5 || (_path$5 = /*#__PURE__*/React__namespace.createElement("path", {
    fill: "currentColor",
    vectorEffect: "non-scaling-stroke",
    d: "m2 21 21-9L2 3v7l15 2-15 2z"
  })));
};

var _path$4, _path2$2;
function _extends$4() { _extends$4 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$4.apply(this, arguments); }
var SvgFile = function SvgFile(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$4({
    xmlns: "http://www.w3.org/2000/svg",
    height: 20,
    viewBox: "0 0 24 24",
    width: 20,
    fill: "currentColor"
  }, props), _path$4 || (_path$4 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  })), _path2$2 || (_path2$2 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zM6 20V4h7v5h5v11H6z"
  })));
};

var _path$3;
function _extends$3() { _extends$3 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$3.apply(this, arguments); }
var SvgXCircle = function SvgXCircle(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$3({
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16
  }, props), _path$3 || (_path$3 = /*#__PURE__*/React__namespace.createElement("path", {
    fill: "currentColor",
    d: "M3.404 12.596a6.5 6.5 0 1 1 9.192-9.192 6.5 6.5 0 0 1-9.192 9.192zM2.344 2.343a8 8 0 1 0 11.313 11.314A8 8 0 0 0 2.343 2.343zM6.03 4.97a.75.75 0 0 0-1.06 1.06L6.94 8 4.97 9.97a.75.75 0 1 0 1.06 1.06L8 9.06l1.97 1.97a.75.75 0 1 0 1.06-1.06L9.06 8l1.97-1.97a.75.75 0 1 0-1.06-1.06L8 6.94 6.03 4.97z"
  })));
};

var _path$2;
function _extends$2() { _extends$2 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2.apply(this, arguments); }
var SvgImage = function SvgImage(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$2({
    xmlns: "http://www.w3.org/2000/svg",
    overflow: "visible",
    preserveAspectRatio: "none",
    viewBox: "0 0 24 24",
    width: 20,
    height: 20
  }, props), _path$2 || (_path$2 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z",
    fill: "currentColor",
    vectorEffect: "non-scaling-stroke"
  })));
};

var css_248z$2 = "/* ************************\n** Variables\n** ********************* */\n:root {\n  --msg-input__background: var(--chat--light__background--1);\n  --msg-input__padding: 10px 9px;\n  --msg-input__emoji-picker__bottom: 16px;\n  --msg-input__emoji-picker__left: 16px;\n  --msg-input__emoji-picker__right: 95px;\n  --msg-input__icon__background: none;\n  --msg-input__icon__border: none;\n  --msg-input__icon__color: var(--chat--light__color--2);\n  --msg-input__icon__fontSize: 13px;\n  --msg-input__icon__margin: 0 9px;\n  --msg-input__icon__padding: 0;\n  --msg-input__send__background: transparent;\n  --msg-input__send__border: none;\n  --msg-input__send__borderRadius: 5px;\n  --msg-input__send__color: var(--chat--light__color--2);\n  --msg-input__send--active__color: var(--chat--light__hover--1);\n  --msg-input__send__fontFamily: inherit;\n  --msg-input__send__fontSize: 13px;\n  --msg-input__send__fontWeight: bold;\n  --msg-input__send__margin: 0 9px;\n  --msg-input__send__minWidth: 0;\n  --msg-input__send__padding: 0;\n  --msg-input--disabled__placeholder__color: rgba(var(--chat--light__color--2-rgb), 0.5);\n  --msg-input__placeholder__color: var(--chat--light__color--2);\n  --msg-input__textarea--focus__border: 1px solid transparent;\n  --msg-input__textarea--focus__outline: none;\n  --msg-input__textarea__background: var(--chat--light__hover--2);\n  --msg-input--disabled__textarea__background: var(--chat--light__background--3);\n  --msg-input__textarea__border: 1px solid transparent;\n  --msg-input--disabled__textarea__border: 1px solid transparent;\n  --msg-input__textarea__borderRadius: 20px;\n  --msg-input__textarea__boxShadow: none;\n  --msg-input__textarea__color: var(--chat--light__color--1);\n  --msg-input__textarea__fontFamily: inherit;\n  --msg-input__textarea__fontSize: 13px;\n  --msg-input__textarea__height: 32px;\n  --msg-input__textarea__lineHeight: 18px;\n  --msg-input__textarea__outline: none;\n  --msg-input__textarea__padding: 6px 14px 8px;\n  --msg-input__textarea__margin: 0 9px;\n  --msg-input__textarea__resize: none;\n  --msg-input__textarea__width: 100%;\n  --msg-input__textarea__overflow: hidden;\n}\n\n/* ************************\n** Styles\n** ********************* */\n.pn-msg-input {\n  background: var(--msg-input__background);\n  padding: var(--msg-input__padding);\n}\n.pn-msg-input__wrapper {\n  align-items: center;\n  display: flex;\n  position: relative;\n}\n.pn-msg-input__textarea {\n  background: var(--msg-input__textarea__background);\n  border-radius: var(--msg-input__textarea__borderRadius);\n  border: var(--msg-input__textarea__border);\n  box-shadow: var(--msg-input__textarea__boxShadow);\n  box-sizing: border-box;\n  color: var(--msg-input__textarea__color);\n  font-family: var(--msg-input__textarea__fontFamily);\n  font-size: var(--msg-input__textarea__fontSize);\n  height: var(--msg-input__textarea__height);\n  line-height: var(--msg-input__textarea__lineHeight);\n  margin: var(--msg-input__textarea__margin);\n  outline: var(--msg-input__textarea__outline);\n  overflow: var(--msg-input__textarea__overflow);\n  padding: var(--msg-input__textarea__padding);\n  resize: var(--msg-input__textarea__resize);\n  width: var(--msg-input__textarea__width);\n}\n.pn-msg-input__textarea:focus-within {\n  outline: var(--msg-input__textarea--focus__outline);\n  border: var(--msg-input__textarea--focus__border);\n}\n.pn-msg-input__textarea::placeholder {\n  color: var(--msg-input__placeholder__color);\n}\n.pn-msg-input__send {\n  background: var(--msg-input__send__background);\n  border-radius: var(--msg-input__send__borderRadius);\n  border: var(--msg-input__send__border);\n  color: var(--msg-input__send__color);\n  cursor: pointer;\n  flex-shrink: 0;\n  font-family: var(--msg-input__send__fontFamily);\n  font-size: var(--msg-input__send__fontSize);\n  font-weight: var(--msg-input__send__fontWeight);\n  margin: var(--msg-input__send__margin);\n  min-width: var(--msg-input__send__minWidth);\n  padding: var(--msg-input__send__padding);\n  white-space: nowrap;\n}\n.pn-msg-input__send--active {\n  color: var(--msg-input__send--active__color);\n}\n.pn-msg-input__emoji-picker {\n  bottom: var(--msg-input__emoji-picker__bottom);\n  left: var(--msg-input__emoji-picker__left);\n  right: var(--msg-input__emoji-picker__right);\n  position: absolute;\n}\n.pn-msg-input__icons {\n  align-items: center;\n  display: flex;\n}\n.pn-msg-input__icons button {\n  background: var(--msg-input__icon__background);\n  border: var(--msg-input__icon__border);\n  color: var(--msg-input__icon__color);\n  cursor: pointer;\n  font-size: var(--msg-input__icon__fontSize);\n  margin: var(--msg-input__icon__margin);\n  padding: var(--msg-input__icon__padding);\n}\n.pn-msg-input__fileLabel {\n  cursor: pointer;\n}\n.pn-msg-input__fileInput {\n  display: none;\n}\n\n.pn-msg-input--disabled .pn-msg-input__textarea {\n  background: var(--msg-input--disabled__textarea__background);\n  border: var(--msg-input--disabled__textarea__border);\n  cursor: not-allowed;\n}\n.pn-msg-input--disabled .pn-msg-input__textarea::placeholder {\n  color: var(--msg-input--disabled__placeholder__color);\n}\n\n/* ************************\n** Themes\n** ********************* */\n.pn-msg-input--dark,\n.pn-msg-input--event-dark,\n.pn-msg-input--support-dark {\n  --msg-input__background: var(--chat--dark__background--1);\n  --msg-input__icon__color: var(--chat--dark__color--2);\n  --msg-input__send__color: var(--chat--dark__color--2);\n  --msg-input__send--active__color: var(--chat--dark__hover--1);\n  --msg-input--disabled__placeholder__color: rgba(var(--chat--dark__hover--4-rgb), 0.5);\n  --msg-input__placeholder__color: var(--chat--dark__hover--4);\n  --msg-input__textarea__background: var(--chat--dark__background--2);\n  --msg-input--disabled__textarea__background: rgba(var(--chat--dark__background--2-rgb), 0.5);\n  --msg-input__textarea__color: var(--chat--dark__color--1);\n}";
styleInject(css_248z$2);

/**
 * Allows users to compose messages using text and emojis
 * and automatically publish them on PubNub channels upon sending.
 */
var MessageInput = function (props) {
    var actionsAfterInput = props.actionsAfterInput, disabled = props.disabled, draftMessage = props.draftMessage, emojiPicker = props.emojiPicker, extraActionsRenderer = props.extraActionsRenderer, fileUpload = props.fileUpload, hideSendButton = props.hideSendButton, onBeforeSend = props.onBeforeSend, onChange = props.onChange, onKeyPress = props.onKeyPress, onSend = props.onSend, placeholder = props.placeholder, sendButton = props.sendButton, senderInfo = props.senderInfo, typingIndicator = props.typingIndicator, otherTextAreaProps = __rest(props, ["actionsAfterInput", "disabled", "draftMessage", "emojiPicker", "extraActionsRenderer", "fileUpload", "hideSendButton", "onBeforeSend", "onChange", "onKeyPress", "onSend", "placeholder", "sendButton", "senderInfo", "typingIndicator"]);
    var _a = useMessageInputCore({ draftMessage: draftMessage, senderInfo: senderInfo, onSend: onSend, onBeforeSend: onBeforeSend, typingIndicator: typingIndicator }), clearInput = _a.clearInput, file = _a.file, setFile = _a.setFile, isValidInputText = _a.isValidInputText, loader = _a.loader, onError = _a.onError, sendMessage = _a.sendMessage, setText = _a.setText, text = _a.text, theme = _a.theme, startTypingIndicator = _a.startTypingIndicator, stopTypingIndicator = _a.stopTypingIndicator;
    var _b = React.useState(false), emojiPickerShown = _b[0], setEmojiPickerShown = _b[1];
    var inputRef = React.useRef(null);
    var fileRef = React.useRef(null);
    var resizeTextAreaEntry = useResizeObserver(inputRef);
    var textAreaWidth = resizeTextAreaEntry === null || resizeTextAreaEntry === void 0 ? void 0 : resizeTextAreaEntry.contentRect.width;
    var pickerRef = useOuterClick(function () {
        if (event.target.closest(".pn-msg-input__emoji-toggle"))
            return;
        setEmojiPickerShown(false);
    });
    /*
    /* Helper functions
    */
    var autoSize = function () {
        var input = inputRef.current;
        if (!input)
            return;
        setTimeout(function () {
            input.style.cssText = "height: auto;";
            input.style.cssText = "height: ".concat(input.scrollHeight, "px;");
        }, 0);
    };
    /*
    /* Event handlers
    */
    var handleInputChange = function (event) {
        try {
            var newText = event.target.value;
            if (typingIndicator) {
                newText.length ? startTypingIndicator() : stopTypingIndicator();
            }
            onChange && onChange(event);
            setText(newText);
        }
        catch (e) {
            onError(e);
        }
    };
    var handleKeyPress = function (event) {
        try {
            if (event.key === "Enter" && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
                if (fileRef.current)
                    fileRef.current.value = "";
            }
            onKeyPress && onKeyPress(event);
        }
        catch (e) {
            onError(e);
        }
    };
    var handleFileChange = function (event) {
        try {
            var file_1 = event.target.files[0];
            setFile(file_1);
            setText(file_1.name);
        }
        catch (e) {
            onError(e);
        }
    };
    var handleSendClick = function () {
        sendMessage();
        if (fileRef.current)
            fileRef.current.value = "";
    };
    var handleEmojiInsertion = React.useCallback(function (emoji) {
        try {
            if (!("native" in emoji))
                return;
            setText(function (text) { return text + emoji.native; });
            setEmojiPickerShown(false);
            if (inputRef.current)
                inputRef.current.focus();
        }
        catch (e) {
            onError(e);
        }
    }, [onError, setText]);
    var handleRemoveFile = function () {
        autoSize();
        clearInput();
        if (fileRef.current)
            fileRef.current.value = "";
    };
    React.useEffect(function () {
        autoSize();
    }, [file, textAreaWidth, text]);
    /*
    /* Renderers
    */
    var renderFileUpload = function () {
        var addTitle = "Add a file";
        var removeTitle = "Remove the file";
        return (React__default["default"].createElement(React__default["default"].Fragment, null, file ? (React__default["default"].createElement("button", { "aria-label": removeTitle, title: removeTitle, onClick: handleRemoveFile },
            React__default["default"].createElement(SvgXCircle, null))) : (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement("button", { "aria-label": addTitle, title: addTitle, onClick: function () { return fileRef.current.click(); } }, fileUpload === "image" ? React__default["default"].createElement(SvgImage, null) : React__default["default"].createElement(SvgFile, null)),
            React__default["default"].createElement("input", { accept: fileUpload === "image" ? "image/*" : "*", className: "pn-msg-input__fileInput", "data-testid": "file-upload", id: "file-upload", onChange: handleFileChange, ref: fileRef, type: "file" })))));
    };
    var renderEmojiPicker = function () {
        var title = "Add an emoji";
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement("button", { "aria-label": title, title: title, onClick: function () { return setEmojiPickerShown(true); } },
                React__default["default"].createElement(SvgEmoji, null)),
            emojiPickerShown && (React__default["default"].createElement("div", { className: "pn-msg-input__emoji-picker", ref: pickerRef, style: actionsAfterInput ? { left: "unset" } : { right: "unset" } }, React__default["default"].cloneElement(emojiPicker, { onEmojiSelect: handleEmojiInsertion })))));
    };
    var renderActions = function () { return (React__default["default"].createElement("div", { className: "pn-msg-input__icons" },
        React__default["default"].createElement("div", { className: "pn-msg-input__emoji-toggle" }, !disabled && emojiPicker && renderEmojiPicker()),
        !disabled && fileUpload && renderFileUpload(),
        extraActionsRenderer && extraActionsRenderer())); };
    return (React__default["default"].createElement("div", { className: "pn-msg-input pn-msg-input--".concat(theme, " ").concat(disabled ? "pn-msg-input--disabled" : "") },
        React__default["default"].createElement("div", { className: "pn-msg-input__wrapper" },
            !actionsAfterInput && renderActions(),
            React__default["default"].createElement("textarea", __assign({}, otherTextAreaProps, { className: "pn-msg-input__textarea", "data-testid": "message-input", disabled: disabled || !!file, onChange: handleInputChange, onKeyPress: handleKeyPress, placeholder: placeholder, ref: inputRef, rows: 1, value: text })),
            actionsAfterInput && renderActions(),
            !hideSendButton && !disabled && (React__default["default"].createElement("button", { "aria-label": "Send", className: "pn-msg-input__send ".concat(isValidInputText() && "pn-msg-input__send--active"), disabled: loader || disabled, onClick: handleSendClick, title: "Send" }, loader ? React__default["default"].createElement(SvgSpinner, null) : sendButton)))));
};
MessageInput.defaultProps = {
    disabled: false,
    fileUpload: undefined,
    hideSendButton: false,
    placeholder: "Send message",
    sendButton: React__default["default"].createElement(SvgAirplane, null),
    senderInfo: false,
    typingIndicator: false,
};

var _path$1, _path2$1;
function _extends$1() { _extends$1 = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1.apply(this, arguments); }
var SvgArrowDown = function SvgArrowDown(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends$1({
    xmlns: "http://www.w3.org/2000/svg",
    height: 16,
    viewBox: "0 0 24 24",
    width: 16,
    fill: "currentColor"
  }, props), _path$1 || (_path$1 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  })), _path2$1 || (_path2$1 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "m20 12-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
  })));
};

var _path, _path2;
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
var SvgDownload = function SvgDownload(props) {
  return /*#__PURE__*/React__namespace.createElement("svg", _extends({
    xmlns: "http://www.w3.org/2000/svg",
    height: 20,
    viewBox: "0 0 24 24",
    width: 20,
    fill: "currentColor"
  }, props), _path || (_path = /*#__PURE__*/React__namespace.createElement("path", {
    fill: "none",
    d: "M0 0h24v24H0z"
  })), _path2 || (_path2 = /*#__PURE__*/React__namespace.createElement("path", {
    d: "M18 15v3H6v-3H4v3c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2v-3h-2zm-1-4-1.41-1.41L13 12.17V4h-2v8.17L8.41 9.59 7 11l5 5 5-5z"
  })));
};

var MessageListItem = React__default["default"].memo(Item, function (prev, next) {
    if (prev.envelope.timetoken !== next.envelope.timetoken)
        return false;
    if (!isEqual_1(prev.envelope.actions, next.envelope.actions))
        return false;
    return true;
});
function Item(_a) {
    var _b;
    var addReaction = _a.addReaction, emojiPickerShown = _a.emojiPickerShown, envelope = _a.envelope, getTime = _a.getTime, getUser = _a.getUser, handleOpenReactions = _a.handleOpenReactions, isOwnMessage = _a.isOwnMessage, listProps = _a.listProps, pubnub = _a.pubnub, reactingToMessage = _a.reactingToMessage, removeReaction = _a.removeReaction, scrollToBottom = _a.scrollToBottom, scrolledBottom = _a.scrolledBottom, setEmojiPickerShown = _a.setEmojiPickerShown, users = _a.users;
    var bubbleRenderer = listProps.bubbleRenderer, enableReactions = listProps.enableReactions, extraActionsRenderer = listProps.extraActionsRenderer, fileRenderer = listProps.fileRenderer, filter = listProps.filter, messageRenderer = listProps.messageRenderer, reactionsPicker = listProps.reactionsPicker;
    var actions = envelope.actions;
    var deleted = !!Object.keys((actions === null || actions === void 0 ? void 0 : actions.deleted) || {}).length;
    if (deleted)
        return;
    var uuid = envelope.uuid || envelope.publisher || "";
    var currentUserClass = isOwnMessage(uuid) ? "pn-msg--own" : "";
    var message = isFilePayload(envelope.message) ? envelope.message.message : envelope.message;
    var time = getTime(envelope.timetoken);
    var isOwn = isOwnMessage(uuid);
    var user = (message === null || message === void 0 ? void 0 : message.sender) || getUser(uuid);
    var file = isFilePayload(envelope.message) && envelope.message.file;
    var editedText = (Object.entries((actions === null || actions === void 0 ? void 0 : actions.updated) || {}).pop() || []).shift();
    var reactions = (_b = envelope.actions) === null || _b === void 0 ? void 0 : _b.reaction;
    return (React__default["default"].createElement("div", { className: "pn-msg ".concat(currentUserClass), key: envelope.timetoken },
        messageRenderer && (filter ? filter(envelope) : true) ? (messageRenderer({ message: envelope, user: user, time: time, isOwn: isOwn, editedText: editedText })) : (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement("div", { className: "pn-msg__avatar", style: { backgroundColor: getPredefinedColor(uuid) } }, (user === null || user === void 0 ? void 0 : user.profileUrl) ? (React__default["default"].createElement("img", { src: user.profileUrl, alt: "User avatar" })) : (getNameInitials((user === null || user === void 0 ? void 0 : user.name) || uuid))),
            React__default["default"].createElement("div", { className: "pn-msg__main" },
                React__default["default"].createElement("div", { className: "pn-msg__content" },
                    React__default["default"].createElement("div", { className: "pn-msg__title" },
                        React__default["default"].createElement("span", { className: "pn-msg__author" }, (user === null || user === void 0 ? void 0 : user.name) || uuid),
                        React__default["default"].createElement("span", { className: "pn-msg__time" }, time)),
                    (message === null || message === void 0 ? void 0 : message.text) &&
                        (bubbleRenderer && (filter ? filter(envelope) : true) ? (bubbleRenderer({ message: envelope, user: user, time: time, isOwn: isOwn, editedText: editedText })) : (React__default["default"].createElement("div", { className: "pn-msg__bubble" }, editedText || (message === null || message === void 0 ? void 0 : message.text))))),
                React__default["default"].createElement("div", { className: "pn-msg__extras" },
                    file && file.name ? (fileRenderer ? (fileRenderer(file)) : (React__default["default"].createElement("div", { className: "pn-msg__file" }, /\.(svg|gif|jpe?g|tiff?|png|webp|bmp)$/i.test(file.name) ? (React__default["default"].createElement("img", { alt: file.name, className: "pn-msg__image", src: file.url, onLoad: function () {
                            if (scrolledBottom)
                                scrollToBottom();
                        } })) : (React__default["default"].createElement("div", { className: "pn-msg__bubble" },
                        React__default["default"].createElement("a", { className: "pn-msg__nonImage", href: file.url, target: "_blank", rel: "noopener noreferrer", download: true },
                            file.name,
                            React__default["default"].createElement(SvgDownload, { className: "pn-msg__downloadIcon" }))))))) : null,
                    enableReactions && reactions ? (React__default["default"].createElement("div", { className: "pn-msg__reactions" }, Object.entries(reactions)
                        .sort(function (_a, _b) {
                        var a = _a[1];
                        var b = _b[1];
                        return b.length - a.length;
                    })
                        .map(function (_a) {
                        var reaction = _a[0], instances = _a[1];
                        var instancesLimit = 99;
                        var instancesLimited = instances.slice(0, instancesLimit);
                        var instancesOverLimit = instances.length - instancesLimited.length;
                        var userReaction = instances === null || instances === void 0 ? void 0 : instances.find(function (i) { return i.uuid === pubnub.getUUID(); });
                        var userNames = instancesLimited.map(function (i) {
                            var user = users.find(function (u) { return u.id === i.uuid; });
                            return user ? user.name : i.uuid;
                        });
                        var tooltipContent = "\n                  ".concat(userNames.join(", "), "\n                  ").concat(instancesOverLimit ? "and ".concat(instancesOverLimit, " more") : "", "\n                ");
                        return (React__default["default"].createElement("div", { className: "pn-tooltip pn-msg__reaction ".concat(userReaction ? "pn-msg__reaction--active" : ""), key: reaction, "data-tooltip": tooltipContent, onClick: function () {
                                userReaction
                                    ? removeReaction(reaction, envelope.timetoken, userReaction.actionTimetoken)
                                    : addReaction(reaction, envelope.timetoken);
                            } },
                            reaction,
                            " ",
                            instancesLimited.length,
                            instancesOverLimit ? "+" : ""));
                    }))) : null)))),
        React__default["default"].createElement("div", { className: "pn-msg__actions" },
            extraActionsRenderer && extraActionsRenderer(envelope),
            reactionsPicker && (message === null || message === void 0 ? void 0 : message.type) !== "welcome" ? (React__default["default"].createElement("div", { className: "pn-msg__reactions-toggle", title: "Add a reaction", onClick: function (e) {
                    emojiPickerShown && reactingToMessage === envelope.timetoken
                        ? setEmojiPickerShown(false)
                        : handleOpenReactions(e, envelope.timetoken);
                } },
                React__default["default"].createElement(SvgEmoji, null))) : null)));
}

var css_248z$1 = "/* ************************\n** Variables\n** ********************* */\n:root {\n  --msg-list__background: var(--chat--light__background--1);\n  --msg-list__padding: 0;\n  --msg-list__unread__background: var(--chat--light__color--2);\n  --msg-list__unread__borderRadius: 20px;\n  --msg-list__unread__color: var(--chat--light__background--2);\n  --msg-list__unread__fontSize: 13px;\n  --msg-list__unread__fontWeight: 400;\n  --msg-list__unread__padding: 8px 16px;\n  --msg-list__unread__offset: 20px;\n  --msg-list__spinner__color: var(--chat--light__color--2);\n  --msg-list__spinner__margin: 10px auto;\n  --msg--hover__background: var(--chat--light__hover--3);\n  --msg__alignItems: flex-start;\n  --msg__flexDirection: row;\n  --msg__height: auto;\n  --msg__padding: 10px 16px;\n  --msg__actions--hover__background: transparent;\n  --msg__actions--hover__color: var(--chat--light__hover--1);\n  --msg__actions--hover__border: 1px solid var(--chat--light__border--1);\n  --msg__actions__background: transparent;\n  --msg__actions__border: 1px solid var(--chat--light__border--1);\n  --msg__actions__borderRadius: 15px;\n  --msg__actions__color: var(--chat--light__color--2);\n  --msg__actions__fontSize: 22px;\n  --msg__actions__margin: 0 0 0 4px;\n  --msg__actions__padding: 0 7px;\n  --msg__actions__right: 10px;\n  --msg__actions__top: 10px;\n  --msg__author__color: var(--chat--light__color--1);\n  --msg__author__fontSize: 15px;\n  --msg__author__fontWeight: 500;\n  --msg__author__padding: 0;\n  --msg__avatar__display: flex;\n  --msg__avatar__fontSize: 10px;\n  --msg__avatar__margin: 2px 18px 0 0;\n  --msg__avatar__size: 36px;\n  --msg__avatar__borderRadius: 36px;\n  --msg__bubble__background: transparent;\n  --msg__bubble__boxShadow: none;\n  --msg__bubble__borderRadius: 0;\n  --msg__bubble__color: var(--chat--light__color--1);\n  --msg__bubble__fontSize: 13px;\n  --msg__bubble__fontWeight: 400;\n  --msg__bubble__margin: 0;\n  --msg__bubble__padding: 0;\n  --msg__content__alignItems: flex-start;\n  --msg__content__flexDirection: column;\n  --msg__content__margin: 0;\n  --msg__image__borderRadius: 10px;\n  --msg__image__margin: 15px 0 0;\n  --msg__link__margin: 10px 0 0;\n  --msg__link__padding: 20px;\n  --msg__link-description__color: var(--chat--light__color--2);\n  --msg__link-thumb__maxWidth: 210px;\n  --msg__link-title__color: var(--chat--light__color--1);\n  --msg__main__alignItems: flex-start;\n  --msg__main__flexDirection: column;\n  --msg__main__margin: 0;\n  --msg__main__maxWidth: 60%;\n  --msg__time__display: block;\n  --msg__time__color: var(--chat--light__color--1);\n  --msg__time__fontSize: 11px;\n  --msg__time__fontWeight: 300;\n  --msg__time__padding: 0 10px;\n  --msg__title__alignItems: baseline;\n  --msg__title__display: flex;\n  --msg__title__flexDirection: row;\n  --msg__title__margin: 0 0 10px;\n  --msg__reaction--hover__background: var(--chat--light__hover--4);\n  --msg__reaction--hover__border: 1px solid var(--chat--light__border--2);\n  --msg__reaction--active__background: rgba(var(--chat--light__background--5-rgb), 0.2);\n  --msg__reaction--active__border: 1px solid transparent;\n  --msg__reaction--active--hover__background: rgba(var(--chat--light__background--5-rgb), 0.24);\n  --msg__reaction--active--hover__border: 1px solid rgba(var(--chat--light__background--5-rgb), 0.4);\n  --msg__reaction__background: transparent;\n  --msg__reaction__border: 1px solid var(--chat--light__border--1);\n  --msg__reaction__borderRadius: 15px;\n  --msg__reaction__margin: 10px 5px 0 0;\n  --msg__reaction__padding: 0 7px 0 3px;\n  --msg__reaction__wordSpacing: 2px;\n}\n\n/* ************************\n** Styles\n** ********************* */\n.pn-msg-list {\n  background: var(--msg-list__background);\n  height: 100%;\n  overflow: hidden;\n  padding: var(--msg-list__padding);\n  position: relative;\n  width: 100%;\n}\n.pn-msg-list-scroller {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: auto;\n  overscroll-behavior-y: contain;\n  position: relative;\n  transform: translateZ(0);\n  width: 100%;\n}\n.pn-msg-list__spinner {\n  text-align: center;\n}\n.pn-msg-list__spinner svg {\n  color: var(--msg-list__spinner__color);\n  margin: var(--msg-list__spinner__margin);\n}\n.pn-msg-list__unread {\n  background: var(--msg-list__unread__background);\n  border-radius: var(--msg-list__unread__borderRadius);\n  color: var(--msg-list__unread__color);\n  cursor: pointer;\n  font-size: var(--msg-list__unread__fontSize);\n  font-weight: var(--msg-list__unread__fontWeight);\n  left: 50%;\n  padding: var(--msg-list__unread__padding);\n  position: absolute;\n  top: var(--msg-list__unread__offset);\n  transform: translateX(-50%);\n  z-index: 5;\n}\n.pn-msg-list__unread svg {\n  vertical-align: bottom;\n}\n.pn-msg-list__bottom-ref {\n  position: relative;\n  height: auto;\n}\n.pn-msg-list__bottom-ref > div {\n  position: absolute;\n  bottom: 0;\n  height: 30px;\n  width: 100%;\n  z-index: -1;\n}\n.pn-msg-list__spacer {\n  flex: 1 1 auto;\n}\n.pn-msg-list__emoji-picker {\n  position: absolute;\n  right: 50px;\n  z-index: 10;\n}\n.pn-msg-list__emoji-picker-hidden {\n  pointer-events: none;\n  visibility: hidden;\n}\n\n.pn-msg {\n  align-items: var(--msg__alignItems);\n  display: flex;\n  flex-direction: var(--msg__flexDirection);\n  height: var(--msg__height);\n  padding: var(--msg__padding);\n  position: relative;\n}\n.pn-msg:hover {\n  background: var(--msg--hover__background);\n}\n.pn-msg:hover .pn-msg__actions {\n  display: flex;\n}\n.pn-msg__actions {\n  color: var(--msg__actions__color);\n  cursor: pointer;\n  display: none;\n  font-size: var(--msg__actions__fontSize);\n  position: absolute;\n  right: var(--msg__actions__right);\n  top: var(--msg__actions__top);\n}\n.pn-msg__actions > * {\n  background: var(--msg__actions__background);\n  border: var(--msg__actions__border);\n  border-radius: var(--msg__actions__borderRadius);\n  display: flex;\n  margin: var(--msg__actions__margin);\n  padding: var(--msg__actions__padding);\n}\n.pn-msg__actions > *:hover {\n  background: var(--msg__actions--hover__background);\n  border: var(--msg__actions--hover__border);\n  color: var(--msg__actions--hover__color);\n}\n.pn-msg__main {\n  align-items: var(--msg__main__alignItems);\n  display: flex;\n  flex-direction: var(--msg__main__flexDirection);\n  padding: var(--msg__main__margin);\n  max-width: var(--msg__main__maxWidth);\n}\n.pn-msg__content {\n  align-items: var(--msg__content__alignItems);\n  display: flex;\n  flex-direction: var(--msg__content__flexDirection);\n  padding: var(--msg__content__margin);\n}\n.pn-msg__title {\n  align-items: var(--msg__title__alignItems);\n  display: var(--msg__title__display);\n  flex-direction: var(--msg__title__flexDirection);\n  margin: var(--msg__title__margin);\n}\n.pn-msg__bubble {\n  background: var(--msg__bubble__background);\n  box-shadow: var(--msg__bubble__boxShadow);\n  border-radius: var(--msg__bubble__borderRadius);\n  color: var(--msg__bubble__color);\n  display: inline-block;\n  font-size: var(--msg__bubble__fontSize);\n  font-weight: var(--msg__bubble__fontWeight);\n  margin: var(--msg__bubble__margin);\n  padding: var(--msg__bubble__padding);\n  word-break: break-word;\n}\n.pn-msg__author {\n  color: var(--msg__author__color);\n  font-size: var(--msg__author__fontSize);\n  font-weight: var(--msg__author__fontWeight);\n  padding: var(--msg__author__padding);\n}\n.pn-msg__time {\n  display: var(--msg__time__display);\n  color: var(--msg__time__color);\n  font-size: var(--msg__time__fontSize);\n  font-weight: var(--msg__time__fontWeight);\n  padding: var(--msg__time__padding);\n}\n.pn-msg__avatar {\n  align-items: center;\n  border-radius: var(--msg__avatar__borderRadius);\n  color: var(--msg-list__background);\n  display: var(--msg__avatar__display);\n  flex: none;\n  font-size: var(--msg__avatar__fontSize);\n  height: var(--msg__avatar__size);\n  justify-content: center;\n  margin: var(--msg__avatar__margin);\n  width: var(--msg__avatar__size);\n}\n.pn-msg__avatar img {\n  border-radius: var(--msg__avatar__borderRadius);\n  height: 100%;\n  width: 100%;\n}\n.pn-msg__reaction {\n  background: var(--msg__reaction__background);\n  border: var(--msg__reaction__border);\n  border-radius: var(--msg__reaction__borderRadius);\n  color: var(--msg__bubble__color);\n  cursor: pointer;\n  display: inline-block;\n  font-size: var(--msg__bubble__fontSize);\n  font-weight: var(--msg__bubble__fontWeight);\n  margin: var(--msg__reaction__margin);\n  padding: var(--msg__reaction__padding);\n  word-spacing: var(--msg__reaction__wordSpacing);\n}\n.pn-msg__reaction:hover {\n  background: var(--msg__reaction--hover__background);\n  border: var(--msg__reaction--hover__border);\n}\n.pn-msg__reaction--active {\n  background: var(--msg__reaction--active__background);\n  border: var(--msg__reaction--active__border);\n}\n.pn-msg__reaction--active:hover {\n  background: var(--msg__reaction--active--hover__background);\n  border: var(--msg__reaction--active--hover__border);\n}\n.pn-msg__image {\n  border-radius: var(--msg__image__borderRadius);\n  box-shadow: var(--msg__bubble__boxShadow);\n  margin: var(--msg__image__margin);\n  max-width: 100%;\n}\n.pn-msg__link {\n  background: var(--msg__bubble__background);\n  border-radius: var(--msg__bubble__borderRadius);\n  box-shadow: var(--msg__bubble__boxShadow);\n  color: var(--msg__bubble__color);\n  display: flex;\n  font-size: var(--msg__bubble__fontSize);\n  font-weight: var(--msg__bubble__fontWeight);\n  margin: var(--msg__link__margin);\n  overflow: hidden;\n  text-decoration: none;\n}\n.pn-msg__link img {\n  max-width: var(--msg__link-thumb__maxWidth);\n}\n.pn-msg__link > div {\n  padding: var(--msg__link__padding);\n}\n.pn-msg__link-name {\n  font-size: 15px;\n  font-weight: 500;\n  margin: 0;\n}\n.pn-msg__link-name img {\n  margin-right: 10px;\n  max-height: 16px;\n  max-width: 16px;\n  vertical-align: bottom;\n}\n.pn-msg__link-title {\n  color: var(--msg__link-title__color);\n  font-weight: 500;\n  margin: 2px 0;\n}\n.pn-msg__link-description {\n  color: var(--msg__link-description__color);\n  margin: 0;\n}\n.pn-msg__nonImage {\n  color: var(--msg__bubble__color);\n}\n.pn-msg__downloadIcon {\n  color: var(--msg__bubble__color);\n  margin: 0 0 0 8px;\n  vertical-align: middle;\n}\n\n/* ************************\n** Themes\n** ********************* */\n.pn-msg-list--dark,\n.pn-msg-list--support-dark,\n.pn-msg-list--event-dark {\n  --msg-list__background: var(--chat--dark__background--1);\n  --msg-list__unread__background: var(--chat--dark__color--2);\n  --msg-list__unread__color: var(--chat--dark__background--2);\n  --msg-list__spinner__color: var(--chat--dark__color--2);\n  --msg--hover__background: var(--chat--dark__border--1);\n  --msg__actions--hover__color: var(--chat--dark__hover--1);\n  --msg__actions--hover__border: 1px solid var(--chat--dark__background--1);\n  --msg__actions--hover__background: var(--chat--dark__background--1);\n  --msg__actions__background: var(--chat--dark__background--1);\n  --msg__actions__border: 1px solid var(--chat--dark__background--1);\n  --msg__actions__color: var(--chat--dark__color--2);\n  --msg__author__color: var(--chat--dark__color--1);\n  --msg__bubble__color: var(--chat--dark__color--1);\n  --msg__link-description__color: var(--chat--dark__color--2);\n  --msg__link-title__color: var(--chat--dark__color--1);\n  --msg__time__color: var(--chat--dark__color--1);\n  --msg__reaction--hover__background: rgba(var(--chat--dark__hover--4-rgb), 0.3);\n  --msg__reaction--hover__border: 1px solid var(--chat--dark__hover--4);\n  --msg__reaction--active__background: rgba(var(--chat--dark__background--5), 0.3);\n  --msg__reaction--active--hover__background: rgba(var(--chat--dark__background--5), 0.4);\n  --msg__reaction--active--hover__border: 1px solid rgba(var(--chat--dark__background--5), 0.4);\n  --msg__reaction__background: var(--chat--dark__background--1);\n  --msg__reaction__border: 1px solid var(--chat--dark__border--1);\n}\n\n.pn-msg-list--support,\n.pn-msg-list--support-dark {\n  --msg__title__display: none;\n}\n.pn-msg-list--support .pn-msg--own,\n.pn-msg-list--support-dark .pn-msg--own {\n  --msg__flexDirection: row-reverse;\n  --msg__avatar__display: none;\n}\n\n.pn-msg-list--event,\n.pn-msg-list--event-dark {\n  --msg__alignItems: flex-start;\n  --msg__actions__top: 0;\n  --msg__author__fontSize: 13px;\n  --msg__avatar__display: none;\n  --msg__bubble__background: transparent;\n  --msg__bubble__padding: 0;\n  --msg__content__alignItems: center;\n  --msg__content__flexDirection: row;\n  --msg__main__alignItems: baseline;\n  --msg__main__flexDirection: column;\n  --msg__main__maxWidth: 100%;\n  --msg__padding: 7px 12px;\n  --msg__time__display: none;\n  --msg__title__margin: 0 6px 0 0;\n}\n.pn-msg-list--event .pn-msg__author:after,\n.pn-msg-list--event-dark .pn-msg__author:after {\n  content: \":\";\n}";
styleInject(css_248z$1);

/**
 * Fetches historical messages using the scrolling pagination pattern and subscribes to the current
 * channel to stay up to date with new messages.
 *
 * It also displays data in an interactive list, including
 * user names, avatars, the time when a message was sent, and attachments (links, images) and allows to react to
 * messages with emojis and to show those reactions immediately.
 */
var MessageList = function (props) {
    var _a, _b, _c, _d;
    var _e = useMessageListCore(props), addReaction = _e.addReaction, channel = _e.channel, emojiPickerShown = _e.emojiPickerShown, fetchHistory = _e.fetchHistory, fetchingMessages = _e.fetchingMessages, getTime = _e.getTime, getUser = _e.getUser, isOwnMessage = _e.isOwnMessage, messages = _e.messages, onError = _e.onError, paginationEnd = _e.paginationEnd, prevChannel = _e.prevChannel, prevMessages = _e.prevMessages, pubnub = _e.pubnub, reactingToMessage = _e.reactingToMessage, removeReaction = _e.removeReaction, scrolledBottom = _e.scrolledBottom, setEmojiPickerShown = _e.setEmojiPickerShown, setReactingToMessage = _e.setReactingToMessage, setScrolledBottom = _e.setScrolledBottom, setUnreadMessages = _e.setUnreadMessages, theme = _e.theme, unreadMessages = _e.unreadMessages, users = _e.users, initMessagesLoaded = _e.initMessagesLoaded;
    var lastMessageUniqueReactions = Object.keys(((_b = (_a = messages.slice(-1)[0]) === null || _a === void 0 ? void 0 : _a.actions) === null || _b === void 0 ? void 0 : _b.reaction) || {});
    var prevLastMessageUniqueReactions = usePrevious(lastMessageUniqueReactions);
    var endRef = React.useRef(null);
    var listRef = React.useRef(null);
    var spinnerRef = React.useRef(null);
    var pickerRef = useOuterClick(handleCloseReactions);
    var isSpinnerVisible = (_c = useIntersectionObserver(spinnerRef)) === null || _c === void 0 ? void 0 : _c.isIntersecting;
    var wasSpinnerVisible = usePrevious(isSpinnerVisible);
    var isBottomVisible = (_d = useIntersectionObserver(endRef)) === null || _d === void 0 ? void 0 : _d.isIntersecting;
    var mutationEntry = useMutationObserver(listRef, { childList: true });
    var resizeEntry = useResizeObserver(listRef);
    var welcomeMessages = props.welcomeMessages &&
        (Array.isArray(props.welcomeMessages) ? props.welcomeMessages : [props.welcomeMessages]);
    /*
    /* Commands
    */
    var scrollToBottom = React.useCallback(function () {
        if (!listRef.current || !listRef.current.scroll)
            return;
        setScrolledBottom(true);
        listRef.current.scroll({ top: listRef.current.scrollHeight });
    }, [setScrolledBottom]);
    /**
     * Event handlers
     */
    function handleOpenReactions(event, timetoken) {
        try {
            var pickerEl = pickerRef.current;
            var listEl = listRef.current;
            var listRect = listEl.getBoundingClientRect();
            var buttonRect = event.target.getBoundingClientRect();
            var newPickerTopPosition = listEl.scrollTop - listRect.top + buttonRect.y;
            if (newPickerTopPosition + pickerEl.offsetHeight > listEl.scrollHeight) {
                newPickerTopPosition += buttonRect.height;
                newPickerTopPosition -= pickerEl.offsetHeight;
            }
            pickerEl.style.top = "".concat(newPickerTopPosition, "px");
            setReactingToMessage(timetoken);
            setEmojiPickerShown(true);
        }
        catch (e) {
            onError(e);
        }
    }
    function handleCloseReactions(event) {
        if (event.target.closest(".pn-msg__reactions-toggle"))
            return;
        if (pickerRef.current)
            pickerRef.current.style.top = "0px";
        setEmojiPickerShown(false);
    }
    function handleEmojiInsertion(emoji) {
        try {
            if (!("native" in emoji))
                return;
            addReaction(emoji.native, reactingToMessage);
            setEmojiPickerShown(false);
        }
        catch (e) {
            onError(e);
        }
    }
    /**
     * Lifecycle
     */
    React.useEffect(function () {
        if (!isSpinnerVisible || wasSpinnerVisible || !initMessagesLoaded[channel] || fetchingMessages)
            return;
        fetchMoreHistory();
        function fetchMoreHistory() {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var firstMessage;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            firstMessage = (_a = listRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(".pn-msg");
                            return [4 /*yield*/, fetchHistory()];
                        case 1:
                            _d.sent();
                            if (firstMessage && ((_b = listRef.current) === null || _b === void 0 ? void 0 : _b.scroll))
                                (_c = listRef.current) === null || _c === void 0 ? void 0 : _c.scroll({ top: firstMessage.offsetTop });
                            return [2 /*return*/];
                    }
                });
            });
        }
    }, [
        fetchHistory,
        isSpinnerVisible,
        wasSpinnerVisible,
        initMessagesLoaded,
        channel,
        fetchingMessages,
    ]);
    React.useEffect(function () {
        if (isBottomVisible)
            setUnreadMessages(0);
        setScrolledBottom(isBottomVisible);
    }, [isBottomVisible, setScrolledBottom, setUnreadMessages]);
    React.useEffect(function () {
        var _a;
        if (scrolledBottom && ((_a = mutationEntry === null || mutationEntry === void 0 ? void 0 : mutationEntry.addedNodes) === null || _a === void 0 ? void 0 : _a.length))
            scrollToBottom();
    }, [mutationEntry, scrollToBottom, scrolledBottom]);
    React.useEffect(function () {
        if (scrolledBottom && resizeEntry)
            scrollToBottom();
    }, [resizeEntry, scrollToBottom, scrolledBottom]);
    React.useEffect(function () {
        if (!scrolledBottom)
            return;
        if (prevMessages.length !== messages.length)
            scrollToBottom();
        if (prevChannel !== channel)
            scrollToBottom();
        if (lastMessageUniqueReactions.length !== prevLastMessageUniqueReactions.length)
            scrollToBottom();
    }, [
        channel,
        lastMessageUniqueReactions.length,
        messages.length,
        prevChannel,
        prevLastMessageUniqueReactions.length,
        prevMessages.length,
        scrollToBottom,
        scrolledBottom,
    ]);
    var messageItemProps = {
        addReaction: addReaction,
        emojiPickerShown: emojiPickerShown,
        getTime: getTime,
        getUser: getUser,
        handleOpenReactions: handleOpenReactions,
        isOwnMessage: isOwnMessage,
        listProps: {
            bubbleRenderer: props.bubbleRenderer,
            enableReactions: props.enableReactions,
            extraActionsRenderer: props.extraActionsRenderer,
            fileRenderer: props.fileRenderer,
            filter: props.filter,
            messageRenderer: props.messageRenderer,
            reactionsPicker: props.reactionsPicker,
        },
        pubnub: pubnub,
        reactingToMessage: reactingToMessage,
        removeReaction: removeReaction,
        scrollToBottom: scrollToBottom,
        scrolledBottom: scrolledBottom,
        setEmojiPickerShown: setEmojiPickerShown,
        users: users,
    };
    return (React__default["default"].createElement("div", { className: "pn-msg-list pn-msg-list--".concat(theme) },
        unreadMessages > 0 && (React__default["default"].createElement("div", { className: "pn-msg-list__unread", onClick: function () { return scrollToBottom(); } },
            unreadMessages,
            " new message",
            unreadMessages > 1 ? "s" : "",
            " ",
            React__default["default"].createElement(SvgArrowDown, null))),
        React__default["default"].createElement("div", { className: "pn-msg-list-scroller", onScroll: props.onScroll, ref: listRef },
            React__default["default"].createElement("span", { ref: spinnerRef, className: "pn-msg-list__spinner" }, !!props.fetchMessages && !paginationEnd && React__default["default"].createElement(SvgSpinner, null)),
            React__default["default"].createElement("div", { className: "pn-msg-list__spacer" }),
            (!props.fetchMessages || (!fetchingMessages && !messages.length)) &&
                welcomeMessages &&
                welcomeMessages.map(function (m) { return (React__default["default"].createElement(MessageListItem, __assign({ key: m.timetoken, envelope: m }, messageItemProps))); }),
            messages &&
                messages.map(function (m) { return (React__default["default"].createElement(MessageListItem, __assign({ key: m.timetoken, envelope: m }, messageItemProps))); }),
            props.children,
            React__default["default"].createElement("div", { className: "pn-msg-list__bottom-ref" },
                React__default["default"].createElement("div", { ref: endRef })),
            props.reactionsPicker && (React__default["default"].createElement("div", { className: "pn-msg-list__emoji-picker ".concat(!emojiPickerShown && "pn-msg-list__emoji-picker-hidden"), ref: pickerRef }, React.cloneElement(props.reactionsPicker, { onEmojiSelect: handleEmojiInsertion }))))));
};
MessageList.defaultProps = {
    enableReactions: false,
    fetchMessages: 0,
};

var css_248z = "/* ************************\n** Variables\n** ********************* */\n:root {\n  --typing-indicator__background: var(--chat--light__background--1);\n  --typing-indicator__color: var(--chat--light__color--1);\n  --typing-indicator__display: inline-block;\n  --typing-indicator__fontSize: 11px;\n  --typing-indicator__fontWeight: 300;\n  --typing-indicator__padding: 8px 24px;\n  --typing-indicator__dot__fontSize: 8px;\n  --typing-indicator__dot__margin: 0 3px 0 0;\n  --typing-indicator__dot__animationTravel: -12px;\n  --typing-indicator__dot__animationDuration: 1.3s;\n  --typing-indicator__dot__animationTimeout1: -1.1s;\n  --typing-indicator__dot__animationTimeout2: -0.9s;\n}\n\n/* ************************\n** Styles\n** ********************* */\n.pn-typing-indicator {\n  background: var(--typing-indicator__background);\n  color: var(--typing-indicator__color);\n  display: var(--typing-indicator__display);\n  font-size: var(--typing-indicator__fontSize);\n  font-weight: var(--typing-indicator__fontWeight);\n  padding: var(--typing-indicator__padding);\n}\n\n.pn-typing-indicator-dot {\n  display: inline-block;\n  font-size: var(--typing-indicator__dot__fontSize);\n  margin: var(--typing-indicator__dot__margin);\n  animation: wave var(--typing-indicator__dot__animationDuration) linear infinite;\n}\n.pn-typing-indicator-dot:nth-child(2) {\n  animation-delay: var(--typing-indicator__dot__animationTimeout1);\n}\n.pn-typing-indicator-dot:nth-child(3) {\n  animation-delay: var(--typing-indicator__dot__animationTimeout2);\n}\n\n@keyframes wave {\n  0%, 60%, 100% {\n    transform: initial;\n  }\n  30% {\n    transform: translateY(var(--typing-indicator__dot__animationTravel));\n  }\n}\n.pn-typing-indicator--dark,\n.pn-typing-indicator--event-dark,\n.pn-typing-indicator--support-dark {\n  --typing-indicator__background: var(--chat--dark__background--1);\n  --typing-indicator__color: var(--chat--dark__color--1);\n}";
styleInject(css_248z);

/** Subscribes to events generated by MessageInput to display information about users that are
 * currently typing messages.
 *
 * It can be displayed as a text denoting the user's name, or in a form similar to
 * a message that can be renderer inside MessageList.
 */
var TypingIndicator = function (props) {
    var _a = useTypingIndicatorCore(), activeUUIDs = _a.activeUUIDs, getIndicationString = _a.getIndicationString, theme = _a.theme, users = _a.users;
    var renderUserBubble = function (uuid) {
        var user = users.find(function (u) { return u.id === uuid; });
        return (React__default["default"].createElement("div", { className: "pn-msg", key: uuid },
            React__default["default"].createElement("div", { className: "pn-msg__avatar" },
                (user === null || user === void 0 ? void 0 : user.profileUrl) && React__default["default"].createElement("img", { src: user.profileUrl, alt: "User avatar" }),
                !(user === null || user === void 0 ? void 0 : user.profileUrl) && React__default["default"].createElement("div", { className: "pn-msg__avatar-placeholder" })),
            React__default["default"].createElement("div", { className: "pn-msg__main" },
                React__default["default"].createElement("div", { className: "pn-msg__title" },
                    React__default["default"].createElement("span", { className: "pn-msg__author" }, (user === null || user === void 0 ? void 0 : user.name) || "Unknown User")),
                React__default["default"].createElement("div", { className: "pn-msg__bubble" },
                    React__default["default"].createElement("span", { className: "pn-typing-indicator-dot" }, "\u25CF"),
                    React__default["default"].createElement("span", { className: "pn-typing-indicator-dot" }, "\u25CF"),
                    React__default["default"].createElement("span", { className: "pn-typing-indicator-dot" }, "\u25CF")))));
    };
    return (React__default["default"].createElement(React__default["default"].Fragment, null,
        !props.showAsMessage && !!activeUUIDs.length && (React__default["default"].createElement("div", { className: "pn-typing-indicator pn-typing-indicator--".concat(theme) },
            getIndicationString(),
            "\u00A0")),
        props.showAsMessage && activeUUIDs.map(function (uuid) { return renderUserBubble(uuid); })));
};
TypingIndicator.defaultProps = {
    showAsMessage: false,
};

exports.ChannelList = ChannelList;
exports.Chat = Chat;
exports.ChatInternal = ChatInternal;
exports.CurrentChannelAtom = CurrentChannelAtom;
exports.CurrentChannelMessagesAtom = CurrentChannelMessagesAtom;
exports.CurrentChannelPaginationAtom = CurrentChannelPaginationAtom;
exports.CurrentChannelTypingIndicatorAtom = CurrentChannelTypingIndicatorAtom;
exports.ErrorFunctionAtom = ErrorFunctionAtom;
exports.MemberList = MemberList;
exports.MessageInput = MessageInput;
exports.MessageList = MessageList;
exports.MessagesAtom = MessagesAtom;
exports.MissingUserCallbackAtom = MissingUserCallbackAtom;
exports.PaginationAtom = PaginationAtom;
exports.RequestMissingUserAtom = RequestMissingUserAtom;
exports.RetryFunctionAtom = RetryFunctionAtom;
exports.SubscribeChannelGroupsAtom = SubscribeChannelGroupsAtom;
exports.SubscribeChannelsAtom = SubscribeChannelsAtom;
exports.ThemeAtom = ThemeAtom;
exports.TypingIndicator = TypingIndicator;
exports.TypingIndicatorAtom = TypingIndicatorAtom;
exports.TypingIndicatorTimeoutAtom = TypingIndicatorTimeoutAtom;
exports.UsersMetaAtom = UsersMetaAtom;
exports.getNameInitials = getNameInitials;
exports.getPredefinedColor = getPredefinedColor;
exports.isFilePayload = isFilePayload;
exports.useChannelListCore = useChannelListCore;
exports.useChannelMembers = useChannelMembers;
exports.useChannels = useChannels;
exports.useIntersectionObserver = useIntersectionObserver;
exports.useMemberListCore = useMemberListCore;
exports.useMessageInputCore = useMessageInputCore;
exports.useMessageListCore = useMessageListCore;
exports.useMessages = useMessages;
exports.useMutationObserver = useMutationObserver;
exports.useOuterClick = useOuterClick;
exports.usePresence = usePresence;
exports.usePrevious = usePrevious;
exports.useResizeObserver = useResizeObserver;
exports.useSubscribe = useSubscribe;
exports.useTypingIndicatorCore = useTypingIndicatorCore;
exports.useUser = useUser;
exports.useUserMemberships = useUserMemberships;
exports.useUsers = useUsers;
